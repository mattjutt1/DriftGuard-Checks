{"created": 1754402886.968904, "duration": 345.7264578342438, "exitcode": 1, "root": "/home/matt/prompt-wizard/cli", "environment": {}, "summary": {"passed": 100, "failed": 14, "total": 114, "collected": 114}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/fixtures/generated", "outcome": "passed", "result": []}, {"nodeid": "tests/fixtures", "outcome": "passed", "result": [{"nodeid": "tests/fixtures/generated", "type": "Dir"}]}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_health_endpoint_integration", "type": "Function", "lineno": 19}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_optimization_endpoint_integration", "type": "Function", "lineno": 50}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_api_error_scenarios", "type": "Function", "lineno": 106}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_malformed_responses", "type": "Function", "lineno": 150}]}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_connection_timeout", "type": "Function", "lineno": 192}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_slow_response_handling", "type": "Function", "lineno": 201}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_partial_response_handling", "type": "Function", "lineno": 231}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_http_status_code_handling", "type": "Function", "lineno": 259}]}, {"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration::test_domain_specific_optimization", "type": "Function", "lineno": 294}, {"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration::test_mode_specific_optimization", "type": "Function", "lineno": 336}]}, {"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling::test_large_prompt_optimization", "type": "Function", "lineno": 408}, {"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling::test_large_response_handling", "type": "Function", "lineno": 450}]}, {"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling::test_multiple_concurrent_requests", "type": "Function", "lineno": 503}, {"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling::test_request_ordering_and_state", "type": "Function", "lineno": 539}]}, {"nodeid": "tests/integration/test_api_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration", "type": "Class"}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience", "type": "Class"}, {"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration", "type": "Class"}, {"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling", "type": "Class"}, {"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling", "type": "Class"}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_health_check_to_optimization_workflow", "type": "Function", "lineno": 21}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_file_based_optimization_workflow", "type": "Function", "lineno": 80}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_batch_processing_workflow", "type": "Function", "lineno": 147}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_health_check_failure_to_retry_workflow", "type": "Function", "lineno": 215}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_partial_batch_failure_workflow", "type": "Function", "lineno": 257}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_network_error_recovery_workflow", "type": "Function", "lineno": 324}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows::test_quick_vs_advanced_mode_timing", "type": "Function", "lineno": 367}, {"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows::test_batch_processing_throughput", "type": "Function", "lineno": 436}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows::test_json_input_workflow", "type": "Function", "lineno": 492}, {"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows::test_csv_output_workflow", "type": "Function", "lineno": 553}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows::test_technical_domain_workflow", "type": "Function", "lineno": 613}, {"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows::test_creative_domain_workflow", "type": "Function", "lineno": 652}]}, {"nodeid": "tests/integration/test_cli_workflows.py::TestInteractiveWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestInteractiveWorkflows::test_comparison_display_workflow", "type": "Function", "lineno": 694}]}, {"nodeid": "tests/integration/test_cli_workflows.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows", "type": "Class"}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows", "type": "Class"}, {"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows", "type": "Class"}, {"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows", "type": "Class"}, {"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows", "type": "Class"}, {"nodeid": "tests/integration/test_cli_workflows.py::TestInteractiveWorkflows", "type": "Class"}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_api_integration.py", "type": "Module"}, {"nodeid": "tests/integration/test_cli_workflows.py", "type": "Module"}]}, {"nodeid": "tests/reports", "outcome": "passed", "result": []}, {"nodeid": "tests/unit/test_client.py::TestConvexClient", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestConvexClient::test_client_initialization", "type": "Function", "lineno": 18}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_get_success", "type": "Function", "lineno": 29}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_post_success", "type": "Function", "lineno": 46}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_error_response", "type": "Function", "lineno": 68}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_http_error", "type": "Function", "lineno": 85}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_connection_error", "type": "Function", "lineno": 102}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_timeout", "type": "Function", "lineno": 112}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_fallback_response", "type": "Function", "lineno": 133}]}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_success", "type": "Function", "lineno": 153}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_failure", "type": "Function", "lineno": 178}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_connection_error", "type": "Function", "lineno": 201}]}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_success", "type": "Function", "lineno": 213}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_failure", "type": "Function", "lineno": 255}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_api_error", "type": "Function", "lineno": 279}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_minimal_config", "type": "Function", "lineno": 299}]}, {"nodeid": "tests/unit/test_client.py::TestSessionMethods", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestSessionMethods::test_quick_optimize_not_implemented", "type": "Function", "lineno": 335}, {"nodeid": "tests/unit/test_client.py::TestSessionMethods::test_advanced_optimize_not_implemented", "type": "Function", "lineno": 344}]}, {"nodeid": "tests/unit/test_client.py::TestRequestHeaders", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestRequestHeaders::test_correct_headers_sent", "type": "Function", "lineno": 357}, {"nodeid": "tests/unit/test_client.py::TestRequestHeaders::test_json_encoding", "type": "Function", "lineno": 374}]}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_convex_error_exception", "type": "Function", "lineno": 403}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_malformed_json_response", "type": "Function", "lineno": 411}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_empty_response", "type": "Function", "lineno": 427}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_missing_status_field", "type": "Function", "lineno": 443}]}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_large_request_handling", "type": "Function", "lineno": 462}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_unicode_handling", "type": "Function", "lineno": 487}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_timeout_configuration", "type": "Function", "lineno": 510}]}, {"nodeid": "tests/unit/test_client.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py::TestConvexClient", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestSessionMethods", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestRequestHeaders", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling", "type": "Class"}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability", "type": "Class"}]}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_default_config_structure", "type": "Function", "lineno": 23}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_default_config_values", "type": "Function", "lineno": 38}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_config_immutability", "type": "Function", "lineno": 53}]}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_quick_mode_config", "type": "Function", "lineno": 66}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_advanced_mode_config", "type": "Function", "lineno": 75}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_mode_config_inheritance", "type": "Function", "lineno": 84}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_mode_config_differences", "type": "Function", "lineno": 93}]}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_domain_configs_exist", "type": "Function", "lineno": 105}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_general_domain_config", "type": "Function", "lineno": 112}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_technical_domain_config", "type": "Function", "lineno": 120}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_creative_domain_config", "type": "Function", "lineno": 132}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_business_domain_config", "type": "Function", "lineno": 146}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_academic_domain_config", "type": "Function", "lineno": 158}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_domain_config_overrides", "type": "Function", "lineno": 172}]}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_default_convex_url", "type": "Function", "lineno": 192}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_custom_convex_url_from_env", "type": "Function", "lineno": 198}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_convex_url_fallback", "type": "Function", "lineno": 208}]}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_api_timeout_value", "type": "Function", "lineno": 223}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_batch_delay_value", "type": "Function", "lineno": 229}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_timeout_batch_delay_relationship", "type": "Function", "lineno": 235}]}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_merge_default_with_quick_mode", "type": "Function", "lineno": 244}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_merge_mode_with_domain", "type": "Function", "lineno": 255}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_full_config_merge", "type": "Function", "lineno": 273}]}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_temperature_ranges", "type": "Function", "lineno": 297}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_positive_integer_values", "type": "Function", "lineno": 307}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_reasonable_value_ranges", "type": "Function", "lineno": 321}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_boolean_values", "type": "Function", "lineno": 335}]}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_task_descriptions_exist", "type": "Function", "lineno": 346}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_base_instructions_exist", "type": "Function", "lineno": 352}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_domain_specialization", "type": "Function", "lineno": 358}]}, {"nodeid": "tests/unit/test_config.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation", "type": "Class"}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation", "type": "Class"}]}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_cli_version", "type": "Function", "lineno": 21}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_cli_help", "type": "Function", "lineno": 27}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_invalid_command", "type": "Function", "lineno": 36}]}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_success", "type": "Function", "lineno": 46}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_failure", "type": "Function", "lineno": 60}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_exception", "type": "Function", "lineno": 73}]}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_prompt_argument", "type": "Function", "lineno": 87}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_file_input", "type": "Function", "lineno": 107}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_no_prompt", "type": "Function", "lineno": 124}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_different_modes", "type": "Function", "lineno": 130}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_different_domains", "type": "Function", "lineno": 148}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_output_file", "type": "Function", "lineno": 162}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_failure", "type": "Function", "lineno": 190}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_exception", "type": "Function", "lineno": 203}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_empty_prompt", "type": "Function", "lineno": 213}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_comparison", "type": "Function", "lineno": 226}]}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_processing_success", "type": "Function", "lineno": 248}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_processing_with_errors", "type": "Function", "lineno": 276}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_nonexistent_file", "type": "Function", "lineno": 294}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_different_formats", "type": "Function", "lineno": 299}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_output_formats", "type": "Function", "lineno": 311}]}, {"nodeid": "tests/unit/test_main.py::TestUtilityFunctions", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestUtilityFunctions::test_display_quality_metrics", "type": "Function", "lineno": 334}, {"nodeid": "tests/unit/test_main.py::TestUtilityFunctions::test_save_optimization_results", "type": "Function", "lineno": 345}]}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_mode", "type": "Function", "lineno": 373}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_domain", "type": "Function", "lineno": 379}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_rounds", "type": "Function", "lineno": 385}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_file_not_exists", "type": "Function", "lineno": 391}]}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_very_long_prompt", "type": "Function", "lineno": 401}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_special_characters", "type": "Function", "lineno": 414}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_unicode_prompt", "type": "Function", "lineno": 426}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_multiline_prompt", "type": "Function", "lineno": 438}]}, {"nodeid": "tests/unit/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_main.py::TestCLIBasics", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestUtilityFunctions", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation", "type": "Class"}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases", "type": "Class"}]}, {"nodeid": "tests/unit", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_client.py", "type": "Module"}, {"nodeid": "tests/unit/test_config.py", "type": "Module"}, {"nodeid": "tests/unit/test_main.py", "type": "Module"}]}, {"nodeid": "tests/utils/test_data_generator.py::TestDataGenerator", "outcome": "passed", "result": []}, {"nodeid": "tests/utils/test_data_generator.py", "outcome": "passed", "result": [{"nodeid": "tests/utils/test_data_generator.py::TestDataGenerator", "type": "Class"}]}, {"nodeid": "tests/utils", "outcome": "passed", "result": [{"nodeid": "tests/utils/test_data_generator.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/fixtures", "type": "Package"}, {"nodeid": "tests/integration", "type": "Package"}, {"nodeid": "tests/reports", "type": "Dir"}, {"nodeid": "tests/unit", "type": "Package"}, {"nodeid": "tests/utils", "type": "Package"}]}], "tests": [{"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_health_endpoint_integration", "lineno": 19, "outcome": "passed", "keywords": ["test_health_endpoint_integration", "__wrapped__", "TestConvexAPIIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0006200330099090934, "outcome": "passed"}, "call": {"duration": 0.001906574994791299, "outcome": "passed"}, "teardown": {"duration": 0.00016362499445676804, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_optimization_endpoint_integration", "lineno": 50, "outcome": "passed", "keywords": ["test_optimization_endpoint_integration", "__wrapped__", "TestConvexAPIIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002395249903202057, "outcome": "passed"}, "call": {"duration": 0.001123466994613409, "outcome": "passed"}, "teardown": {"duration": 0.00019891600823029876, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_api_error_scenarios", "lineno": 106, "outcome": "failed", "keywords": ["test_api_error_scenarios", "__wrapped__", "TestConvexAPIIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002451159816700965, "outcome": "passed"}, "call": {"duration": 0.0011183330207131803, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_api_integration.py", "lineno": 130, "message": "AssertionError: assert 'Rate limit exceeded' in 'API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize'\n +  where 'API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize' = str(ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize'))\n +    where ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize') = <ExceptionInfo ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize') tblen=3>.value"}, "traceback": [{"path": "tests/integration/test_api_integration.py", "lineno": 130, "message": "in test_api_error_scenarios"}], "longrepr": "tests/integration/test_api_integration.py:130: in test_api_error_scenarios\n    assert \"Rate limit exceeded\" in str(exc_info.value)\nE   AssertionError: assert 'Rate limit exceeded' in 'API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize'\nE    +  where 'API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize' = str(ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize'))\nE    +    where ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize') = <ExceptionInfo ConvexError('API request failed: 429 Client Error: Too Many Requests for url: https://enchanted-rooster-257.convex.site/optimize') tblen=3>.value"}, "teardown": {"duration": 0.00019387499196454883, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConvexAPIIntegration::test_malformed_responses", "lineno": 150, "outcome": "failed", "keywords": ["test_malformed_responses", "__wrapped__", "TestConvexAPIIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00023915799101814628, "outcome": "passed"}, "call": {"duration": 0.0014354079903569072, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_api_integration.py", "lineno": 187, "message": "AssertionError: assert 'result' in {'data': {'result': {'best_prompt': 'Test result'}}}"}, "traceback": [{"path": "tests/integration/test_api_integration.py", "lineno": 187, "message": "in test_malformed_responses"}], "longrepr": "tests/integration/test_api_integration.py:187: in test_malformed_responses\n    assert \"result\" in result\nE   AssertionError: assert 'result' in {'data': {'result': {'best_prompt': 'Test result'}}}"}, "teardown": {"duration": 0.0002444749989081174, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_connection_timeout", "lineno": 192, "outcome": "passed", "keywords": ["test_connection_timeout", "TestNetworkResilience", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002933329960796982, "outcome": "passed"}, "call": {"duration": 0.017089417000534013, "outcome": "passed"}, "teardown": {"duration": 0.00017508299788460135, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_slow_response_handling", "lineno": 201, "outcome": "passed", "keywords": ["test_slow_response_handling", "__wrapped__", "TestNetworkResilience", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00023035900085233152, "outcome": "passed"}, "call": {"duration": 0.10204177600098774, "outcome": "passed"}, "teardown": {"duration": 0.0005352419975679368, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_partial_response_handling", "lineno": 231, "outcome": "passed", "keywords": ["test_partial_response_handling", "__wrapped__", "TestNetworkResilience", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0008056589867919683, "outcome": "passed"}, "call": {"duration": 0.002304316993104294, "outcome": "passed"}, "teardown": {"duration": 0.00042533298255875707, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestNetworkResilience::test_http_status_code_handling", "lineno": 259, "outcome": "passed", "keywords": ["test_http_status_code_handling", "__wrapped__", "TestNetworkResilience", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0005808919959235936, "outcome": "passed"}, "call": {"duration": 0.002997042000060901, "outcome": "passed"}, "teardown": {"duration": 0.0004145170096307993, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration::test_domain_specific_optimization", "lineno": 294, "outcome": "passed", "keywords": ["test_domain_specific_optimization", "__wrapped__", "TestConfigurationIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0004949999856762588, "outcome": "passed"}, "call": {"duration": 0.0015208419936243445, "outcome": "passed"}, "teardown": {"duration": 0.00030213300487957895, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConfigurationIntegration::test_mode_specific_optimization", "lineno": 336, "outcome": "passed", "keywords": ["test_mode_specific_optimization", "__wrapped__", "TestConfigurationIntegration", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0003075420099776238, "outcome": "passed"}, "call": {"duration": 0.0016245169972535223, "outcome": "passed"}, "teardown": {"duration": 0.0001727920025587082, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling::test_large_prompt_optimization", "lineno": 408, "outcome": "passed", "keywords": ["test_large_prompt_optimization", "__wrapped__", "TestLargeDataHandling", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002801329828798771, "outcome": "passed"}, "call": {"duration": 0.0012393330107443035, "outcome": "passed"}, "teardown": {"duration": 0.00016995001351460814, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestLargeDataHandling::test_large_response_handling", "lineno": 450, "outcome": "passed", "keywords": ["test_large_response_handling", "__wrapped__", "TestLargeDataHandling", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.000368866982171312, "outcome": "passed"}, "call": {"duration": 0.0009365580044686794, "outcome": "passed"}, "teardown": {"duration": 0.00015262499800883234, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling::test_multiple_concurrent_requests", "lineno": 503, "outcome": "passed", "keywords": ["test_multiple_concurrent_requests", "__wrapped__", "TestConcurrentRequestHandling", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002227500081062317, "outcome": "passed"}, "call": {"duration": 0.0034067920059897006, "outcome": "passed"}, "teardown": {"duration": 0.00028150901198387146, "outcome": "passed"}}, {"nodeid": "tests/integration/test_api_integration.py::TestConcurrentRequestHandling::test_request_ordering_and_state", "lineno": 539, "outcome": "passed", "keywords": ["test_request_ordering_and_state", "__wrapped__", "TestConcurrentRequestHandling", "test_api_integration.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00036382500547915697, "outcome": "passed"}, "call": {"duration": 0.0020028250000905246, "outcome": "passed"}, "teardown": {"duration": 0.0002036839723587036, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_health_check_to_optimization_workflow", "lineno": 21, "outcome": "passed", "keywords": ["test_health_check_to_optimization_workflow", "__wrapped__", "TestCompleteWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00029837500187568367, "outcome": "passed"}, "call": {"duration": 10.535031069011893, "outcome": "passed"}, "teardown": {"duration": 0.0006332049961201847, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_file_based_optimization_workflow", "lineno": 80, "outcome": "passed", "keywords": ["test_file_based_optimization_workflow", "__wrapped__", "TestCompleteWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0010250020131934434, "outcome": "passed"}, "call": {"duration": 10.519547987991245, "outcome": "passed"}, "teardown": {"duration": 0.0002196329878643155, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestCompleteWorkflows::test_batch_processing_workflow", "lineno": 147, "outcome": "failed", "keywords": ["test_batch_processing_workflow", "__wrapped__", "TestCompleteWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.000423500023316592, "outcome": "passed"}, "call": {"duration": 3.0265240669832565, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_cli_workflows.py", "lineno": 189, "message": "AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, business domain)\\n\ud83d\udcc4 Input: /tmp/tmp87mo0grm.txt \u2192 \ud83d\udcdd Output: /tmp/tmpz318omul/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp87mo0grm.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmpz318omul/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmpz318omul/batch_results.json\\n'\n +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, business domain)\\n\ud83d\udcc4 Input: /tmp/tmp87mo0grm.txt \u2192 \ud83d\udcdd Output: /tmp/tmpz318omul/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp87mo0grm.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmpz318omul/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmpz318omul/batch_results.json\\n' = <Result okay>.output"}, "traceback": [{"path": "tests/integration/test_cli_workflows.py", "lineno": 189, "message": "in test_batch_processing_workflow"}], "longrepr": "tests/integration/test_cli_workflows.py:189: in test_batch_processing_workflow\n    assert \"Batch Optimization Complete\" in result.output\nE   AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, business domain)\\n\ud83d\udcc4 Input: /tmp/tmp87mo0grm.txt \u2192 \ud83d\udcdd Output: /tmp/tmpz318omul/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp87mo0grm.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmpz318omul/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmpz318omul/batch_results.json\\n'\nE    +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, business domain)\\n\ud83d\udcc4 Input: /tmp/tmp87mo0grm.txt \u2192 \ud83d\udcdd Output: /tmp/tmpz318omul/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp87mo0grm.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmpz318omul/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmpz318omul/batch_results.json\\n' = <Result okay>.output"}, "teardown": {"duration": 0.0003038749855477363, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_health_check_failure_to_retry_workflow", "lineno": 215, "outcome": "passed", "keywords": ["test_health_check_failure_to_retry_workflow", "__wrapped__", "TestErrorRecoveryWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.000360800011549145, "outcome": "passed"}, "call": {"duration": 0.007261008984642103, "outcome": "passed"}, "teardown": {"duration": 0.00018021700088866055, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_partial_batch_failure_workflow", "lineno": 257, "outcome": "failed", "keywords": ["test_partial_batch_failure_workflow", "__wrapped__", "TestErrorRecoveryWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0002749999985098839, "outcome": "passed"}, "call": {"duration": 3.0374167260015383, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_cli_workflows.py", "lineno": 304, "message": "AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmppepdzssf.txt \u2192 \ud83d\udcdd Output: \\n/tmp/tmp5lw_lhuh/partial_failure_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27052 \u274c1 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmppepdzssf.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 2                                \u2502 (66.7% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 1                                \u2502 (33.3% of processed)      \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp5lw_lhuh/partial_failur\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u26a0\ufe0f  Failed Prompts (1):\\n  2: Prompt 2 - will fail \u2192 Rate limit exceeded - please try again later\\n\\n\u2705 Results saved to /tmp/tmp5lw_lhuh/partial_failure_results.json\\n'\n +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmppepdzssf.txt \u2192 \ud83d\udcdd Output: \\n/tmp/tmp5lw_lhuh/partial_failure_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27052 \u274c1 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmppepdzssf.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 2                                \u2502 (66.7% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 1                                \u2502 (33.3% of processed)      \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp5lw_lhuh/partial_failur\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u26a0\ufe0f  Failed Prompts (1):\\n  2: Prompt 2 - will fail \u2192 Rate limit exceeded - please try again later\\n\\n\u2705 Results saved to /tmp/tmp5lw_lhuh/partial_failure_results.json\\n' = <Result okay>.output"}, "traceback": [{"path": "tests/integration/test_cli_workflows.py", "lineno": 304, "message": "in test_partial_batch_failure_workflow"}], "longrepr": "tests/integration/test_cli_workflows.py:304: in test_partial_batch_failure_workflow\n    assert \"Batch Optimization Complete\" in result.output\nE   AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmppepdzssf.txt \u2192 \ud83d\udcdd Output: \\n/tmp/tmp5lw_lhuh/partial_failure_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27052 \u274c1 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmppepdzssf.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 2                                \u2502 (66.7% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 1                                \u2502 (33.3% of processed)      \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp5lw_lhuh/partial_failur\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u26a0\ufe0f  Failed Prompts (1):\\n  2: Prompt 2 - will fail \u2192 Rate limit exceeded - please try again later\\n\\n\u2705 Results saved to /tmp/tmp5lw_lhuh/partial_failure_results.json\\n'\nE    +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmppepdzssf.txt \u2192 \ud83d\udcdd Output: \\n/tmp/tmp5lw_lhuh/partial_failure_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27052 \u274c1 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmppepdzssf.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 2                                \u2502 (66.7% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 1                                \u2502 (33.3% of processed)      \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp5lw_lhuh/partial_failur\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u26a0\ufe0f  Failed Prompts (1):\\n  2: Prompt 2 - will fail \u2192 Rate limit exceeded - please try again later\\n\\n\u2705 Results saved to /tmp/tmp5lw_lhuh/partial_failure_results.json\\n' = <Result okay>.output"}, "teardown": {"duration": 0.0003705160052049905, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestErrorRecoveryWorkflows::test_network_error_recovery_workflow", "lineno": 324, "outcome": "failed", "keywords": ["test_network_error_recovery_workflow", "__wrapped__", "TestErrorRecoveryWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0005721829948015511, "outcome": "passed"}, "call": {"duration": 5.018690994998906, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_cli_workflows.py", "lineno": 355, "message": "assert 'Optimization failed' in \"\\n\ud83d\ude80 PromptWizard Optimization (quick mode, general domain)\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udcdd Original Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Test prompt                                                                  \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\u2839 \u2728 Generating optimizations \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                      33% ~10s remaining\\n\\n\u274c Unexpected error: Network connection failed\\n\\n\ud83d\udca1 Please try running 'promptevolver health' to check system status\\n\"\n +  where \"\\n\ud83d\ude80 PromptWizard Optimization (quick mode, general domain)\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udcdd Original Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Test prompt                                                                  \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\u2839 \u2728 Generating optimizations \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                      33% ~10s remaining\\n\\n\u274c Unexpected error: Network connection failed\\n\\n\ud83d\udca1 Please try running 'promptevolver health' to check system status\\n\" = <Result okay>.output"}, "traceback": [{"path": "tests/integration/test_cli_workflows.py", "lineno": 355, "message": "in test_network_error_recovery_workflow"}], "longrepr": "tests/integration/test_cli_workflows.py:355: in test_network_error_recovery_workflow\n    assert \"Optimization failed\" in result1.output\nE   assert 'Optimization failed' in \"\\n\ud83d\ude80 PromptWizard Optimization (quick mode, general domain)\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udcdd Original Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Test prompt                                                                  \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\u2839 \u2728 Generating optimizations \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                      33% ~10s remaining\\n\\n\u274c Unexpected error: Network connection failed\\n\\n\ud83d\udca1 Please try running 'promptevolver health' to check system status\\n\"\nE    +  where \"\\n\ud83d\ude80 PromptWizard Optimization (quick mode, general domain)\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udcdd Original Prompt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Test prompt                                                                  \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n\u2839 \u2728 Generating optimizations \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                      33% ~10s remaining\\n\\n\u274c Unexpected error: Network connection failed\\n\\n\ud83d\udca1 Please try running 'promptevolver health' to check system status\\n\" = <Result okay>.output"}, "teardown": {"duration": 0.0011882749968208373, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows::test_quick_vs_advanced_mode_timing", "lineno": 367, "outcome": "failed", "keywords": ["test_quick_vs_advanced_mode_timing", "__wrapped__", "TestPerformanceWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0016120499931275845, "outcome": "passed"}, "call": {"duration": 21.426482111011865, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_cli_workflows.py", "lineno": 435, "message": "assert 10.809425354003906 > 12.709853649139404"}, "traceback": [{"path": "tests/integration/test_cli_workflows.py", "lineno": 435, "message": "in test_quick_vs_advanced_mode_timing"}], "longrepr": "tests/integration/test_cli_workflows.py:435: in test_quick_vs_advanced_mode_timing\n    assert advanced_duration > quick_duration\nE   assert 10.809425354003906 > 12.709853649139404"}, "teardown": {"duration": 0.00021999998716637492, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestPerformanceWorkflows::test_batch_processing_throughput", "lineno": 436, "outcome": "failed", "keywords": ["test_batch_processing_throughput", "__wrapped__", "TestPerformanceWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00029562501003965735, "outcome": "passed"}, "call": {"duration": 10.52852190900012, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/integration/test_cli_workflows.py", "lineno": 476, "message": "AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmpw3767her.txt \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 10 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 10/10 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u270510 \u274c0 (1.1/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                  \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 10                 \u2502 From /tmp/tmpw3767her.txt \u2502\\n\u2502 Processed     \u2502 10                 \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 10                 \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 10.5s              \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n'\n +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmpw3767her.txt \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 10 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 10/10 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u270510 \u274c0 (1.1/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                  \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 10                 \u2502 From /tmp/tmpw3767her.txt \u2502\\n\u2502 Processed     \u2502 10                 \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 10                 \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 10.5s              \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n' = <Result okay>.output"}, "traceback": [{"path": "tests/integration/test_cli_workflows.py", "lineno": 476, "message": "in test_batch_processing_throughput"}], "longrepr": "tests/integration/test_cli_workflows.py:476: in test_batch_processing_throughput\n    assert \"Batch Optimization Complete\" in result.output\nE   AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmpw3767her.txt \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 10 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 10/10 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u270510 \u274c0 (1.1/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                  \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 10                 \u2502 From /tmp/tmpw3767her.txt \u2502\\n\u2502 Processed     \u2502 10                 \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 10                 \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 10.5s              \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n'\nE    +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmpw3767her.txt \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 10 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 10/10 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u270510 \u274c0 (1.1/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                  \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 10                 \u2502 From /tmp/tmpw3767her.txt \u2502\\n\u2502 Processed     \u2502 10                 \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 10                 \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 10.5s              \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n' = <Result okay>.output"}, "teardown": {"duration": 0.00035786701482720673, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows::test_json_input_workflow", "lineno": 492, "outcome": "passed", "keywords": ["test_json_input_workflow", "__wrapped__", "TestMultiFormatWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0004503579984884709, "outcome": "passed"}, "call": {"duration": 3.017319239996141, "outcome": "passed"}, "teardown": {"duration": 0.00021457902039401233, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestMultiFormatWorkflows::test_csv_output_workflow", "lineno": 553, "outcome": "passed", "keywords": ["test_csv_output_workflow", "__wrapped__", "TestMultiFormatWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0003310210013296455, "outcome": "passed"}, "call": {"duration": 2.012634288985282, "outcome": "passed"}, "teardown": {"duration": 0.00022412100224755704, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows::test_technical_domain_workflow", "lineno": 613, "outcome": "passed", "keywords": ["test_technical_domain_workflow", "__wrapped__", "TestDomainSpecializationWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.0003731769975274801, "outcome": "passed"}, "call": {"duration": 10.51078548899386, "outcome": "passed"}, "teardown": {"duration": 0.00020859998767264187, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestDomainSpecializationWorkflows::test_creative_domain_workflow", "lineno": 652, "outcome": "passed", "keywords": ["test_creative_domain_workflow", "__wrapped__", "TestDomainSpecializationWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.00032789999386295676, "outcome": "passed"}, "call": {"duration": 10.52590147498995, "outcome": "passed"}, "teardown": {"duration": 0.0006677019991911948, "outcome": "passed"}}, {"nodeid": "tests/integration/test_cli_workflows.py::TestInteractiveWorkflows::test_comparison_display_workflow", "lineno": 694, "outcome": "passed", "keywords": ["test_comparison_display_workflow", "__wrapped__", "TestInteractiveWorkflows", "test_cli_workflows.py", "integration", "tests", "cli", ""], "setup": {"duration": 0.001118871005019173, "outcome": "passed"}, "call": {"duration": 10.519387448002817, "outcome": "passed"}, "teardown": {"duration": 0.0002559020067565143, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_client_initialization", "lineno": 18, "outcome": "passed", "keywords": ["test_client_initialization", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0006344799767248333, "outcome": "passed"}, "call": {"duration": 0.00019803098984993994, "outcome": "passed"}, "teardown": {"duration": 0.00019404100021347404, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_get_success", "lineno": 29, "outcome": "passed", "keywords": ["test_call_http_endpoint_get_success", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00028916000155732036, "outcome": "passed"}, "call": {"duration": 0.001177830999949947, "outcome": "passed"}, "teardown": {"duration": 0.00019803098984993994, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_post_success", "lineno": 46, "outcome": "passed", "keywords": ["test_call_http_endpoint_post_success", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00029163097497075796, "outcome": "passed"}, "call": {"duration": 0.0011536949896253645, "outcome": "passed"}, "teardown": {"duration": 0.0002464940189383924, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_error_response", "lineno": 68, "outcome": "failed", "keywords": ["test_call_http_endpoint_error_response", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0005647310172207654, "outcome": "passed"}, "call": {"duration": 0.0017502600094303489, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_client.py", "lineno": 84, "message": "AssertionError: assert 'Invalid request' in 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error'\n +  where 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error' = str(ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error'))\n +    where ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error') = <ExceptionInfo ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error') tblen=2>.value"}, "traceback": [{"path": "tests/unit/test_client.py", "lineno": 84, "message": "in test_call_http_endpoint_error_response"}], "longrepr": "tests/unit/test_client.py:84: in test_call_http_endpoint_error_response\n    assert \"Invalid request\" in str(exc_info.value)\nE   AssertionError: assert 'Invalid request' in 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error'\nE    +  where 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error' = str(ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error'))\nE    +    where ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error') = <ExceptionInfo ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/error') tblen=2>.value"}, "teardown": {"duration": 0.00029581200215034187, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_http_error", "lineno": 85, "outcome": "passed", "keywords": ["test_call_http_endpoint_http_error", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0003349619801156223, "outcome": "passed"}, "call": {"duration": 0.0011378260096535087, "outcome": "passed"}, "teardown": {"duration": 0.0002569470088928938, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_connection_error", "lineno": 102, "outcome": "passed", "keywords": ["test_call_http_endpoint_connection_error", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002735760062932968, "outcome": "passed"}, "call": {"duration": 0.000697385985404253, "outcome": "passed"}, "teardown": {"duration": 0.00017779102199710906, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_timeout", "lineno": 112, "outcome": "failed", "keywords": ["test_call_http_endpoint_timeout", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002621730091050267, "outcome": "passed"}, "call": {"duration": 31.001937049994012, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_client.py", "lineno": 129, "message": "Failed: DID NOT RAISE <class 'promptevolver_cli.client.ConvexError'>"}, "traceback": [{"path": "tests/unit/test_client.py", "lineno": 129, "message": "in test_call_http_endpoint_timeout"}], "longrepr": "tests/unit/test_client.py:129: in test_call_http_endpoint_timeout\n    with pytest.raises(ConvexError) as exc_info:\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   Failed: DID NOT RAISE <class 'promptevolver_cli.client.ConvexError'>"}, "teardown": {"duration": 0.0005547710170503706, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestConvexClient::test_call_http_endpoint_fallback_response", "lineno": 133, "outcome": "passed", "keywords": ["test_call_http_endpoint_fallback_response", "__wrapped__", "TestConvexClient", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0006726080027874559, "outcome": "passed"}, "call": {"duration": 0.0016604030097369105, "outcome": "passed"}, "teardown": {"duration": 0.0004013720026705414, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_success", "lineno": 153, "outcome": "passed", "keywords": ["test_check_health_success", "__wrapped__", "TestHealthCheck", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0005526729801204056, "outcome": "passed"}, "call": {"duration": 0.001719512976706028, "outcome": "passed"}, "teardown": {"duration": 0.00024635199224576354, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_failure", "lineno": 178, "outcome": "passed", "keywords": ["test_check_health_failure", "__wrapped__", "TestHealthCheck", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0004012770077679306, "outcome": "passed"}, "call": {"duration": 0.0011851440067403018, "outcome": "passed"}, "teardown": {"duration": 0.00028401101008057594, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestHealthCheck::test_check_health_connection_error", "lineno": 201, "outcome": "passed", "keywords": ["test_check_health_connection_error", "__wrapped__", "TestHealthCheck", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00030927598709240556, "outcome": "passed"}, "call": {"duration": 0.0008113250078167766, "outcome": "passed"}, "teardown": {"duration": 0.00022633199114352465, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_success", "lineno": 213, "outcome": "passed", "keywords": ["test_optimize_prompt_success", "__wrapped__", "TestOptimizePrompt", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00031947699608281255, "outcome": "passed"}, "call": {"duration": 0.0011862890096381307, "outcome": "passed"}, "teardown": {"duration": 0.00020173500524833798, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_failure", "lineno": 255, "outcome": "passed", "keywords": ["test_optimize_prompt_failure", "__wrapped__", "TestOptimizePrompt", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00029831199208274484, "outcome": "passed"}, "call": {"duration": 0.0008975100063253194, "outcome": "passed"}, "teardown": {"duration": 0.00017074999050237238, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_api_error", "lineno": 279, "outcome": "failed", "keywords": ["test_optimize_prompt_api_error", "__wrapped__", "TestOptimizePrompt", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002634179836604744, "outcome": "passed"}, "call": {"duration": 0.0010839909955393523, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_client.py", "lineno": 298, "message": "AssertionError: assert 'Invalid prompt format' in 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize'\n +  where 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize' = str(ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize'))\n +    where ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize') = <ExceptionInfo ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize') tblen=3>.value"}, "traceback": [{"path": "tests/unit/test_client.py", "lineno": 298, "message": "in test_optimize_prompt_api_error"}], "longrepr": "tests/unit/test_client.py:298: in test_optimize_prompt_api_error\n    assert \"Invalid prompt format\" in str(exc_info.value)\nE   AssertionError: assert 'Invalid prompt format' in 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize'\nE    +  where 'API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize' = str(ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize'))\nE    +    where ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize') = <ExceptionInfo ConvexError('API request failed: 400 Client Error: Bad Request for url: https://test.convex.cloud/optimize') tblen=3>.value"}, "teardown": {"duration": 0.00022480599000118673, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestOptimizePrompt::test_optimize_prompt_minimal_config", "lineno": 299, "outcome": "passed", "keywords": ["test_optimize_prompt_minimal_config", "__wrapped__", "TestOptimizePrompt", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002538850239943713, "outcome": "passed"}, "call": {"duration": 0.0009327849838882685, "outcome": "passed"}, "teardown": {"duration": 0.00015587700181640685, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestSessionMethods::test_quick_optimize_not_implemented", "lineno": 335, "outcome": "passed", "keywords": ["test_quick_optimize_not_implemented", "TestSessionMethods", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022795199765823781, "outcome": "passed"}, "call": {"duration": 0.00015597199671901762, "outcome": "passed"}, "teardown": {"duration": 0.00017875898629426956, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestSessionMethods::test_advanced_optimize_not_implemented", "lineno": 344, "outcome": "passed", "keywords": ["test_advanced_optimize_not_implemented", "TestSessionMethods", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022023098426871002, "outcome": "passed"}, "call": {"duration": 0.00015053802053444088, "outcome": "passed"}, "teardown": {"duration": 0.00015101500321179628, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestRequestHeaders::test_correct_headers_sent", "lineno": 357, "outcome": "passed", "keywords": ["test_correct_headers_sent", "__wrapped__", "TestRequestHeaders", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023329100804403424, "outcome": "passed"}, "call": {"duration": 0.0009176259918604046, "outcome": "passed"}, "teardown": {"duration": 0.00015683099627494812, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestRequestHeaders::test_json_encoding", "lineno": 374, "outcome": "passed", "keywords": ["test_json_encoding", "__wrapped__", "TestRequestHeaders", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002283340145368129, "outcome": "passed"}, "call": {"duration": 0.0008236230059992522, "outcome": "passed"}, "teardown": {"duration": 0.00016331300139427185, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_convex_error_exception", "lineno": 403, "outcome": "passed", "keywords": ["test_convex_error_exception", "TestErrorHandling", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00025731700588949025, "outcome": "passed"}, "call": {"duration": 0.0001356659922748804, "outcome": "passed"}, "teardown": {"duration": 0.0001452950236853212, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_malformed_json_response", "lineno": 411, "outcome": "passed", "keywords": ["test_malformed_json_response", "__wrapped__", "TestErrorHandling", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022242299746721983, "outcome": "passed"}, "call": {"duration": 0.0009208680130541325, "outcome": "passed"}, "teardown": {"duration": 0.00015292101306840777, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_empty_response", "lineno": 427, "outcome": "passed", "keywords": ["test_empty_response", "__wrapped__", "TestErrorHandling", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00026122501003555954, "outcome": "passed"}, "call": {"duration": 0.0008063680143095553, "outcome": "passed"}, "teardown": {"duration": 0.00015196800814010203, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestErrorHandling::test_missing_status_field", "lineno": 443, "outcome": "passed", "keywords": ["test_missing_status_field", "__wrapped__", "TestErrorHandling", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022671400802209973, "outcome": "passed"}, "call": {"duration": 0.0007239949773065746, "outcome": "passed"}, "teardown": {"duration": 0.00014167200424708426, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_large_request_handling", "lineno": 462, "outcome": "passed", "keywords": ["test_large_request_handling", "__wrapped__", "TestPerformanceAndReliability", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002071690105367452, "outcome": "passed"}, "call": {"duration": 0.0007624160207342356, "outcome": "passed"}, "teardown": {"duration": 0.00014005100820213556, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_unicode_handling", "lineno": 487, "outcome": "passed", "keywords": ["test_unicode_handling", "__wrapped__", "TestPerformanceAndReliability", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002059290127363056, "outcome": "passed"}, "call": {"duration": 0.0007182749977800995, "outcome": "passed"}, "teardown": {"duration": 0.0001391929981764406, "outcome": "passed"}}, {"nodeid": "tests/unit/test_client.py::TestPerformanceAndReliability::test_timeout_configuration", "lineno": 510, "outcome": "passed", "keywords": ["test_timeout_configuration", "__wrapped__", "patchings", "TestPerformanceAndReliability", "test_client.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020907499128952622, "outcome": "passed"}, "call": {"duration": 0.0009132410050369799, "outcome": "passed"}, "teardown": {"duration": 0.0001714169920887798, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_default_config_structure", "lineno": 23, "outcome": "passed", "keywords": ["test_default_config_structure", "TestDefaultConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022194700432009995, "outcome": "passed"}, "call": {"duration": 0.00012384398723952472, "outcome": "passed"}, "teardown": {"duration": 0.00013452101848088205, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_default_config_values", "lineno": 38, "outcome": "passed", "keywords": ["test_default_config_values", "TestDefaultConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002068829780910164, "outcome": "passed"}, "call": {"duration": 0.00012584601063281298, "outcome": "passed"}, "teardown": {"duration": 0.0001587370061315596, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDefaultConfiguration::test_config_immutability", "lineno": 53, "outcome": "passed", "keywords": ["test_config_immutability", "TestDefaultConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020583398872986436, "outcome": "passed"}, "call": {"duration": 0.0001513010065536946, "outcome": "passed"}, "teardown": {"duration": 0.0001360469905193895, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_quick_mode_config", "lineno": 66, "outcome": "passed", "keywords": ["test_quick_mode_config", "TestModeConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020631100051105022, "outcome": "passed"}, "call": {"duration": 0.00012241298099979758, "outcome": "passed"}, "teardown": {"duration": 0.00013309202040545642, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_advanced_mode_config", "lineno": 75, "outcome": "passed", "keywords": ["test_advanced_mode_config", "TestModeConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020640698494389653, "outcome": "passed"}, "call": {"duration": 0.0001227000029757619, "outcome": "passed"}, "teardown": {"duration": 0.0001340449962299317, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_mode_config_inheritance", "lineno": 84, "outcome": "passed", "keywords": ["test_mode_config_inheritance", "TestModeConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020402297377586365, "outcome": "passed"}, "call": {"duration": 0.00013499800115823746, "outcome": "passed"}, "teardown": {"duration": 0.0001372869883198291, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestModeConfigurations::test_mode_config_differences", "lineno": 93, "outcome": "passed", "keywords": ["test_mode_config_differences", "TestModeConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020735900034196675, "outcome": "passed"}, "call": {"duration": 0.00012584598152898252, "outcome": "passed"}, "teardown": {"duration": 0.00013490300625562668, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_domain_configs_exist", "lineno": 105, "outcome": "passed", "keywords": ["test_domain_configs_exist", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002058349782600999, "outcome": "passed"}, "call": {"duration": 0.0001253689988516271, "outcome": "passed"}, "teardown": {"duration": 0.0001344259944744408, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_general_domain_config", "lineno": 112, "outcome": "passed", "keywords": ["test_general_domain_config", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00022585599799640477, "outcome": "passed"}, "call": {"duration": 0.000123081001220271, "outcome": "passed"}, "teardown": {"duration": 0.00013375902199186385, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_technical_domain_config", "lineno": 120, "outcome": "passed", "keywords": ["test_technical_domain_config", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020306999795138836, "outcome": "passed"}, "call": {"duration": 0.0001214600051753223, "outcome": "passed"}, "teardown": {"duration": 0.00014119601109996438, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_creative_domain_config", "lineno": 132, "outcome": "passed", "keywords": ["test_creative_domain_config", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002382489910814911, "outcome": "passed"}, "call": {"duration": 0.00013032599235884845, "outcome": "passed"}, "teardown": {"duration": 0.00013232900528237224, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_business_domain_config", "lineno": 146, "outcome": "passed", "keywords": ["test_business_domain_config", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020325998775660992, "outcome": "passed"}, "call": {"duration": 0.00012174600851722062, "outcome": "passed"}, "teardown": {"duration": 0.00013251902419142425, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_academic_domain_config", "lineno": 158, "outcome": "passed", "keywords": ["test_academic_domain_config", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020345099619589746, "outcome": "passed"}, "call": {"duration": 0.00015158700989559293, "outcome": "passed"}, "teardown": {"duration": 0.0001339490117970854, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestDomainConfigurations::test_domain_config_overrides", "lineno": 172, "outcome": "passed", "keywords": ["test_domain_config_overrides", "TestDomainConfigurations", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002067880122922361, "outcome": "passed"}, "call": {"duration": 0.0001269899948965758, "outcome": "passed"}, "teardown": {"duration": 0.00013661899720318615, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_default_convex_url", "lineno": 192, "outcome": "failed", "keywords": ["test_default_convex_url", "TestEnvironmentConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020354599109850824, "outcome": "passed"}, "call": {"duration": 0.00023291000979952514, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_config.py", "lineno": 197, "message": "AssertionError: assert 'convex.cloud' in 'https://enchanted-rooster-257.convex.site'"}, "traceback": [{"path": "tests/unit/test_config.py", "lineno": 197, "message": "in test_default_convex_url"}], "longrepr": "tests/unit/test_config.py:197: in test_default_convex_url\n    assert \"convex.cloud\" in CONVEX_BASE_URL\nE   AssertionError: assert 'convex.cloud' in 'https://enchanted-rooster-257.convex.site'"}, "teardown": {"duration": 0.00019439400057308376, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_custom_convex_url_from_env", "lineno": 198, "outcome": "passed", "keywords": ["test_custom_convex_url_from_env", "__wrapped__", "TestEnvironmentConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002289059921167791, "outcome": "passed"}, "call": {"duration": 0.0006567820091731846, "outcome": "passed"}, "teardown": {"duration": 0.0001415759907104075, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestEnvironmentConfiguration::test_convex_url_fallback", "lineno": 208, "outcome": "failed", "keywords": ["test_convex_url_fallback", "__wrapped__", "TestEnvironmentConfiguration", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020802702056244016, "outcome": "passed"}, "call": {"duration": 0.0006076830031815916, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_config.py", "lineno": 218, "message": "AssertionError: assert 'convex.cloud' in 'https://enchanted-rooster-257.convex.site'\n +  where 'https://enchanted-rooster-257.convex.site' = <module 'promptevolver_cli.config' from '/home/matt/prompt-wizard/cli/promptevolver_cli/config.py'>.CONVEX_BASE_URL\n +    where <module 'promptevolver_cli.config' from '/home/matt/prompt-wizard/cli/promptevolver_cli/config.py'> = <module 'promptevolver_cli' from '/home/matt/prompt-wizard/cli/promptevolver_cli/__init__.py'>.config"}, "traceback": [{"path": "tests/unit/test_config.py", "lineno": 218, "message": "in test_convex_url_fallback"}], "longrepr": "tests/unit/test_config.py:218: in test_convex_url_fallback\n    assert \"convex.cloud\" in promptevolver_cli.config.CONVEX_BASE_URL\nE   AssertionError: assert 'convex.cloud' in 'https://enchanted-rooster-257.convex.site'\nE    +  where 'https://enchanted-rooster-257.convex.site' = <module 'promptevolver_cli.config' from '/home/matt/prompt-wizard/cli/promptevolver_cli/config.py'>.CONVEX_BASE_URL\nE    +    where <module 'promptevolver_cli.config' from '/home/matt/prompt-wizard/cli/promptevolver_cli/config.py'> = <module 'promptevolver_cli' from '/home/matt/prompt-wizard/cli/promptevolver_cli/__init__.py'>.config"}, "teardown": {"duration": 0.00018733899923972785, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_api_timeout_value", "lineno": 223, "outcome": "passed", "keywords": ["test_api_timeout_value", "TestTimeoutAndDelaySettings", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00025960500352084637, "outcome": "passed"}, "call": {"duration": 0.0001268940104637295, "outcome": "passed"}, "teardown": {"duration": 0.00015816499944776297, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_batch_delay_value", "lineno": 229, "outcome": "passed", "keywords": ["test_batch_delay_value", "TestTimeoutAndDelaySettings", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002080269914586097, "outcome": "passed"}, "call": {"duration": 0.00012184199295006692, "outcome": "passed"}, "teardown": {"duration": 0.00013566602137871087, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestTimeoutAndDelaySettings::test_timeout_batch_delay_relationship", "lineno": 235, "outcome": "passed", "keywords": ["test_timeout_batch_delay_relationship", "TestTimeoutAndDelaySettings", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020707398653030396, "outcome": "passed"}, "call": {"duration": 0.00012050700024701655, "outcome": "passed"}, "teardown": {"duration": 0.000135189009597525, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_merge_default_with_quick_mode", "lineno": 244, "outcome": "passed", "keywords": ["test_merge_default_with_quick_mode", "TestConfigurationMerging", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020955299260094762, "outcome": "passed"}, "call": {"duration": 0.0001321379968430847, "outcome": "passed"}, "teardown": {"duration": 0.00015139600145630538, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_merge_mode_with_domain", "lineno": 255, "outcome": "passed", "keywords": ["test_merge_mode_with_domain", "TestConfigurationMerging", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00021727499552071095, "outcome": "passed"}, "call": {"duration": 0.00013252001372165978, "outcome": "passed"}, "teardown": {"duration": 0.00013680901611223817, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationMerging::test_full_config_merge", "lineno": 273, "outcome": "passed", "keywords": ["test_full_config_merge", "TestConfigurationMerging", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00021012499928474426, "outcome": "passed"}, "call": {"duration": 0.00014148099580779672, "outcome": "passed"}, "teardown": {"duration": 0.0001383350172545761, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_temperature_ranges", "lineno": 297, "outcome": "passed", "keywords": ["test_temperature_ranges", "TestConfigurationValidation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002080269914586097, "outcome": "passed"}, "call": {"duration": 0.000124988000607118, "outcome": "passed"}, "teardown": {"duration": 0.00013509401469491422, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_positive_integer_values", "lineno": 307, "outcome": "passed", "keywords": ["test_positive_integer_values", "TestConfigurationValidation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020612002117559314, "outcome": "passed"}, "call": {"duration": 0.0001269899948965758, "outcome": "passed"}, "teardown": {"duration": 0.00013633299386128783, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_reasonable_value_ranges", "lineno": 321, "outcome": "passed", "keywords": ["test_reasonable_value_ranges", "TestConfigurationValidation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023005000548437238, "outcome": "passed"}, "call": {"duration": 0.00012422498548403382, "outcome": "passed"}, "teardown": {"duration": 0.00013557099737226963, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationValidation::test_boolean_values", "lineno": 335, "outcome": "passed", "keywords": ["test_boolean_values", "TestConfigurationValidation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00020878901705145836, "outcome": "passed"}, "call": {"duration": 0.00015654400340281427, "outcome": "passed"}, "teardown": {"duration": 0.0001434840087313205, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_task_descriptions_exist", "lineno": 346, "outcome": "passed", "keywords": ["test_task_descriptions_exist", "TestConfigurationDocumentation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00025378901045769453, "outcome": "passed"}, "call": {"duration": 0.00017113200738094747, "outcome": "passed"}, "teardown": {"duration": 0.0001433880242984742, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_base_instructions_exist", "lineno": 352, "outcome": "passed", "keywords": ["test_base_instructions_exist", "TestConfigurationDocumentation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00021937198471277952, "outcome": "passed"}, "call": {"duration": 0.0001496800105087459, "outcome": "passed"}, "teardown": {"duration": 0.00013509401469491422, "outcome": "passed"}}, {"nodeid": "tests/unit/test_config.py::TestConfigurationDocumentation::test_domain_specialization", "lineno": 358, "outcome": "passed", "keywords": ["test_domain_specialization", "TestConfigurationDocumentation", "test_config.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023214801331050694, "outcome": "passed"}, "call": {"duration": 0.00012984999921172857, "outcome": "passed"}, "teardown": {"duration": 0.00013728599878959358, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_cli_version", "lineno": 21, "outcome": "passed", "keywords": ["test_cli_version", "TestCLIBasics", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023758201859891415, "outcome": "passed"}, "call": {"duration": 0.00038249598583206534, "outcome": "passed"}, "teardown": {"duration": 0.0001844789949245751, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_cli_help", "lineno": 27, "outcome": "passed", "keywords": ["test_cli_help", "TestCLIBasics", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023662898456677794, "outcome": "passed"}, "call": {"duration": 0.00112832200829871, "outcome": "passed"}, "teardown": {"duration": 0.00017666100757196546, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestCLIBasics::test_invalid_command", "lineno": 36, "outcome": "passed", "keywords": ["test_invalid_command", "TestCLIBasics", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00023624699679203331, "outcome": "passed"}, "call": {"duration": 0.000512917002197355, "outcome": "passed"}, "teardown": {"duration": 0.0001761839957907796, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_success", "lineno": 46, "outcome": "passed", "keywords": ["test_health_check_success", "__wrapped__", "patchings", "TestHealthCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002851549943443388, "outcome": "passed"}, "call": {"duration": 0.002956901997094974, "outcome": "passed"}, "teardown": {"duration": 0.00017332399147562683, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_failure", "lineno": 60, "outcome": "passed", "keywords": ["test_health_check_failure", "__wrapped__", "patchings", "TestHealthCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002596049744170159, "outcome": "passed"}, "call": {"duration": 0.002803311974275857, "outcome": "passed"}, "teardown": {"duration": 0.00016188298468478024, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestHealthCommand::test_health_check_exception", "lineno": 73, "outcome": "passed", "keywords": ["test_health_check_exception", "__wrapped__", "patchings", "TestHealthCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00037534500006586313, "outcome": "passed"}, "call": {"duration": 0.0030366040009539574, "outcome": "passed"}, "teardown": {"duration": 0.00015501902089454234, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_prompt_argument", "lineno": 87, "outcome": "passed", "keywords": ["test_optimize_with_prompt_argument", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00024568598018959165, "outcome": "passed"}, "call": {"duration": 10.516367959004128, "outcome": "passed"}, "teardown": {"duration": 0.00043163399095647037, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_file_input", "lineno": 107, "outcome": "passed", "keywords": ["test_optimize_with_file_input", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0011250099923927337, "outcome": "passed"}, "call": {"duration": 10.538443433004431, "outcome": "passed"}, "teardown": {"duration": 0.0002570859796833247, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_no_prompt", "lineno": 124, "outcome": "passed", "keywords": ["test_optimize_no_prompt", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0003876670089084655, "outcome": "passed"}, "call": {"duration": 0.0013201149995438755, "outcome": "passed"}, "teardown": {"duration": 0.00017009599832817912, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_different_modes", "lineno": 130, "outcome": "passed", "keywords": ["test_optimize_different_modes", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0003646400000434369, "outcome": "passed"}, "call": {"duration": 21.034277839004062, "outcome": "passed"}, "teardown": {"duration": 0.0002649160160217434, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_different_domains", "lineno": 148, "outcome": "passed", "keywords": ["test_optimize_different_domains", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00042496700189076364, "outcome": "passed"}, "call": {"duration": 52.58633783602272, "outcome": "passed"}, "teardown": {"duration": 0.0007089580176398158, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_output_file", "lineno": 162, "outcome": "passed", "keywords": ["test_optimize_with_output_file", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0017143400036729872, "outcome": "passed"}, "call": {"duration": 10.527414198004408, "outcome": "passed"}, "teardown": {"duration": 0.0008313370053656399, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_failure", "lineno": 190, "outcome": "passed", "keywords": ["test_optimize_failure", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0005923430144321173, "outcome": "passed"}, "call": {"duration": 10.507897183997557, "outcome": "passed"}, "teardown": {"duration": 0.0002451519831083715, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_exception", "lineno": 203, "outcome": "passed", "keywords": ["test_optimize_exception", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0002750160056166351, "outcome": "passed"}, "call": {"duration": 5.008680113009177, "outcome": "passed"}, "teardown": {"duration": 0.00029797598836012185, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_empty_prompt", "lineno": 213, "outcome": "passed", "keywords": ["test_optimize_empty_prompt", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0004671349888667464, "outcome": "passed"}, "call": {"duration": 0.0030221999913919717, "outcome": "passed"}, "teardown": {"duration": 0.0002519289846532047, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestOptimizeCommand::test_optimize_with_comparison", "lineno": 226, "outcome": "passed", "keywords": ["test_optimize_with_comparison", "__wrapped__", "patchings", "TestOptimizeCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0004239410045556724, "outcome": "passed"}, "call": {"duration": 10.50871446999372, "outcome": "passed"}, "teardown": {"duration": 0.0001760010200086981, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_processing_success", "lineno": 248, "outcome": "failed", "keywords": ["test_batch_processing_success", "__wrapped__", "patchings", "TestBatchCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0007194129866547883, "outcome": "passed"}, "call": {"duration": 3.023584103997564, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_main.py", "lineno": 267, "message": "AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp6okkznzk.txt \u2192 \ud83d\udcdd Output: /tmp/tmp3mak_bfm/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp6okkznzk.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp3mak_bfm/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmp3mak_bfm/batch_results.json\\n'\n +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp6okkznzk.txt \u2192 \ud83d\udcdd Output: /tmp/tmp3mak_bfm/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp6okkznzk.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp3mak_bfm/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmp3mak_bfm/batch_results.json\\n' = <Result okay>.output"}, "traceback": [{"path": "tests/unit/test_main.py", "lineno": 267, "message": "in test_batch_processing_success"}], "longrepr": "tests/unit/test_main.py:267: in test_batch_processing_success\n    assert \"Batch Optimization Complete\" in result.output\nE   AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp6okkznzk.txt \u2192 \ud83d\udcdd Output: /tmp/tmp3mak_bfm/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp6okkznzk.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp3mak_bfm/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmp3mak_bfm/batch_results.json\\n'\nE    +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp6okkznzk.txt \u2192 \ud83d\udcdd Output: /tmp/tmp3mak_bfm/batch_results.json \\n(JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                         \ud83d\udcca Batch Optimization Summary                          \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value                            \u2503 Details                   \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                                \u2502 From /tmp/tmp6okkznzk.txt \u2502\\n\u2502 Processed     \u2502 3                                \u2502 (100.0%)                  \u2502\\n\u2502 \u2705 Successful \u2502 3                                \u2502 (100.0% of processed)     \u2502\\n\u2502 \u274c Failed     \u2502 0                                \u2502 (0.0% of processed)       \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s                             \u2502 1.0 prompts/min           \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 /tmp/tmp3mak_bfm/batch_results.\u2026 \u2502 JSON format               \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to /tmp/tmp3mak_bfm/batch_results.json\\n' = <Result okay>.output"}, "teardown": {"duration": 0.0005911579937674105, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_processing_with_errors", "lineno": 276, "outcome": "passed", "keywords": ["test_batch_processing_with_errors", "__wrapped__", "patchings", "TestBatchCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0006718709773849696, "outcome": "passed"}, "call": {"duration": 3.028581332997419, "outcome": "passed"}, "teardown": {"duration": 0.0006479060102719814, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_nonexistent_file", "lineno": 294, "outcome": "passed", "keywords": ["test_batch_nonexistent_file", "TestBatchCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0006542319897562265, "outcome": "passed"}, "call": {"duration": 0.0018045309989247471, "outcome": "passed"}, "teardown": {"duration": 0.0003632070147432387, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_different_formats", "lineno": 299, "outcome": "failed", "keywords": ["test_batch_different_formats", "__wrapped__", "patchings", "TestBatchCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0008028129814192653, "outcome": "passed"}, "call": {"duration": 3.0128045990131795, "outcome": "failed", "crash": {"path": "/home/matt/prompt-wizard/cli/tests/unit/test_main.py", "lineno": 310, "message": "AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp_dkafsms.json \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                   \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                    \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                  \u2502 From /tmp/tmp_dkafsms.json \u2502\\n\u2502 Processed     \u2502 3                  \u2502 (100.0%)                   \u2502\\n\u2502 \u2705 Successful \u2502 3                  \u2502 (100.0% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)        \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s               \u2502 1.0 prompts/min            \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format                \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n'\n +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp_dkafsms.json \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                   \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                    \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                  \u2502 From /tmp/tmp_dkafsms.json \u2502\\n\u2502 Processed     \u2502 3                  \u2502 (100.0%)                   \u2502\\n\u2502 \u2705 Successful \u2502 3                  \u2502 (100.0% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)        \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s               \u2502 1.0 prompts/min            \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format                \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n' = <Result okay>.output"}, "traceback": [{"path": "tests/unit/test_main.py", "lineno": 310, "message": "in test_batch_different_formats"}], "longrepr": "tests/unit/test_main.py:310: in test_batch_different_formats\n    assert \"Batch Optimization Complete\" in result.output\nE   AssertionError: assert 'Batch Optimization Complete' in '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp_dkafsms.json \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                   \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                    \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                  \u2502 From /tmp/tmp_dkafsms.json \u2502\\n\u2502 Processed     \u2502 3                  \u2502 (100.0%)                   \u2502\\n\u2502 \u2705 Successful \u2502 3                  \u2502 (100.0% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)        \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s               \u2502 1.0 prompts/min            \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format                \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n'\nE    +  where '\\n\ud83d\udce6 Batch Optimization (quick mode, general domain)\\n\ud83d\udcc4 Input: /tmp/tmp_dkafsms.json \u2192 \ud83d\udcdd Output: batch_results.json (JSON)\\n\\n\ud83d\udcca Found 3 prompts to optimize\\n\u26a0\ufe0f  Processing will stop on first error (use --continue-on-error to change)\\n  Processing prompt 3/3 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u27053 \u274c0 (1.5/min)\\n\\n\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Batch Processing Complete \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n                   \ud83d\udcca Batch Optimization Summary                   \\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\\n\u2503 Metric        \u2503 Value              \u2503 Details                    \u2503\\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\\n\u2502 Total Prompts \u2502 3                  \u2502 From /tmp/tmp_dkafsms.json \u2502\\n\u2502 Processed     \u2502 3                  \u2502 (100.0%)                   \u2502\\n\u2502 \u2705 Successful \u2502 3                  \u2502 (100.0% of processed)      \u2502\\n\u2502 \u274c Failed     \u2502 0                  \u2502 (0.0% of processed)        \u2502\\n\u2502 \u23f1\ufe0f Total Time  \u2502 3.0s               \u2502 1.0 prompts/min            \u2502\\n\u2502 \ud83d\udcc1 Output     \u2502 batch_results.json \u2502 JSON format                \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\\n\u2705 Results saved to batch_results.json\\n' = <Result okay>.output"}, "teardown": {"duration": 0.0003037750138901174, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestBatchCommand::test_batch_output_formats", "lineno": 311, "outcome": "passed", "keywords": ["test_batch_output_formats", "__wrapped__", "patchings", "TestBatchCommand", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0007655239896848798, "outcome": "passed"}, "call": {"duration": 12.064520112005994, "outcome": "passed"}, "teardown": {"duration": 0.00062516302568838, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestUtilityFunctions::test_display_quality_metrics", "lineno": 334, "outcome": "passed", "keywords": ["test_display_quality_metrics", "TestUtilityFunctions", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0005653080006595701, "outcome": "passed"}, "call": {"duration": 0.0034530439879745245, "outcome": "passed"}, "teardown": {"duration": 0.00033069102209992707, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestUtilityFunctions::test_save_optimization_results", "lineno": 345, "outcome": "passed", "keywords": ["test_save_optimization_results", "TestUtilityFunctions", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0007838790188543499, "outcome": "passed"}, "call": {"duration": 0.0005275500006973743, "outcome": "passed"}, "teardown": {"duration": 0.0004369499802123755, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_mode", "lineno": 373, "outcome": "passed", "keywords": ["test_invalid_mode", "TestArgumentValidation", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00041542999679222703, "outcome": "passed"}, "call": {"duration": 0.001220061007188633, "outcome": "passed"}, "teardown": {"duration": 0.00021751501481048763, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_domain", "lineno": 379, "outcome": "passed", "keywords": ["test_invalid_domain", "TestArgumentValidation", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00034971401328220963, "outcome": "passed"}, "call": {"duration": 0.0010208009916823357, "outcome": "passed"}, "teardown": {"duration": 0.0002131910005118698, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_invalid_rounds", "lineno": 385, "outcome": "passed", "keywords": ["test_invalid_rounds", "TestArgumentValidation", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0003475050034467131, "outcome": "passed"}, "call": {"duration": 0.000962866994086653, "outcome": "passed"}, "teardown": {"duration": 0.00018994102720171213, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestArgumentValidation::test_file_not_exists", "lineno": 391, "outcome": "passed", "keywords": ["test_file_not_exists", "TestArgumentValidation", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.00030283001251518726, "outcome": "passed"}, "call": {"duration": 0.0009255890036001801, "outcome": "passed"}, "teardown": {"duration": 0.00018590601393952966, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_very_long_prompt", "lineno": 401, "outcome": "passed", "keywords": ["test_very_long_prompt", "__wrapped__", "patchings", "TestEdgeCases", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0003047509817406535, "outcome": "passed"}, "call": {"duration": 10.527519733004738, "outcome": "passed"}, "teardown": {"duration": 0.0006959150196053088, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_special_characters", "lineno": 414, "outcome": "passed", "keywords": ["test_special_characters", "__wrapped__", "patchings", "TestEdgeCases", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0009894279937725514, "outcome": "passed"}, "call": {"duration": 10.517916876997333, "outcome": "passed"}, "teardown": {"duration": 0.0003850000211969018, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_unicode_prompt", "lineno": 426, "outcome": "passed", "keywords": ["test_unicode_prompt", "__wrapped__", "patchings", "TestEdgeCases", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0006519339804071933, "outcome": "passed"}, "call": {"duration": 10.513855316006811, "outcome": "passed"}, "teardown": {"duration": 0.00029053600155748427, "outcome": "passed"}}, {"nodeid": "tests/unit/test_main.py::TestEdgeCases::test_multiline_prompt", "lineno": 438, "outcome": "passed", "keywords": ["test_multiline_prompt", "__wrapped__", "patchings", "TestEdgeCases", "test_main.py", "unit", "tests", "cli", ""], "setup": {"duration": 0.0004530260048341006, "outcome": "passed"}, "call": {"duration": 10.51910908697755, "outcome": "passed"}, "teardown": {"duration": 0.0004905569949187338, "outcome": "passed"}}], "warnings": [{"message": "cannot collect test class 'TestDataGenerator' because it has a __init__ constructor (from: tests/utils/test_data_generator.py)", "category": "PytestCollectionWarning", "when": "collect", "filename": "/home/matt/prompt-wizard/cli/tests/utils/test_data_generator.py", "lineno": 13}]}