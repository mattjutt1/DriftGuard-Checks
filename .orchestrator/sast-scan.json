{"version":"1.131.0","results":[{"check_id":"javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp","path":"src/mocks/redis-mock.ts","start":{"line":81,"col":19,"offset":1873},"end":{"line":81,"col":57,"offset":1911},"extra":{"message":"RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.","metadata":{"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"cwe":["CWE-1333: Inefficient Regular Expression Complexity"],"references":["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"],"source-rule-url":"https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js","category":"security","technology":["javascript"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Denial-of-Service (DoS)"],"source":"https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp","shortlink":"https://sg.run/gr65"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization","path":"src/mocks/redis-mock.ts","start":{"line":81,"col":30,"offset":1884},"end":{"line":81,"col":56,"offset":1910},"extra":{"message":"`pattern.replace` method will only replace the first occurrence when used with a string argument ('*'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.","metadata":{"cwe":["CWE-116: Improper Encoding or Escaping of Output"],"category":"security","technology":["javascript"],"owasp":["A03:2021 - Injection"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Encoding"],"source":"https://semgrep.dev/r/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization","shortlink":"https://sg.run/1GbQ"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring","path":"src/security/index.ts","start":{"line":294,"col":23,"offset":8629},"end":{"line":294,"col":60,"offset":8666},"extra":{"message":"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.","metadata":{"cwe":["CWE-134: Use of Externally-Controlled Format String"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["javascript"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"LOW","confidence":"LOW","references":["https://cwe.mitre.org/data/definitions/134.html"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring","shortlink":"https://sg.run/7Y5R"},"severity":"INFO","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["src/health-server.ts","src/index-integrated.ts","src/index-secure.ts","src/index.ts","src/mocks/redis-mock.ts","src/octokit-throttled.ts","src/security/advanced-2025.ts","src/security/index.ts","src/server.ts","src/simple-evaluation.ts"]},"time":{"rules":[],"rules_parse_time":1.6317908763885498,"profiling_times":{"config_time":4.8305768966674805,"core_time":2.4641306400299072,"ignores_time":0.0012290477752685547,"total_time":7.296440124511719},"parsing_time":{"total_time":0.3416588306427002,"per_file_time":{"mean":0.034165883064270014,"std_dev":0.00017262321812779646},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":1.5940067768096924,"per_file_time":{"mean":0.05313355922698974,"std_dev":0.008025511820135119},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"matching_time":{"total_time":0.7245504856109619,"per_file_and_rule_time":{"mean":0.005890654354560666,"std_dev":9.944638988690207e-05},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_files":[]},"tainting_time":{"total_time":0.2077019214630127,"per_def_and_rule_time":{"mean":0.0003339259187508243,"std_dev":3.335744861096676e-07},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_defs":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1109610688},"engine_requested":"OSS","skipped_rules":[]}
