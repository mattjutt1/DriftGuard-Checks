name: Prompt Gate

permissions:
  contents: read
  statuses: write

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch: {}

jobs:
  prompt-gate-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Decide pass/fail from label
        id: decide
        run: |
          python - <<'PY'
          import json, os
          ev=json.load(open(os.environ['GITHUB_EVENT_PATH']))
          names=[l['name'] for l in ev['pull_request'].get('labels',[])]
          ok='driftguard' in names
          with open(os.environ['GITHUB_OUTPUT'],'a') as f:
              f.write(f"pass={'true' if ok else 'false'}\n")
          PY

      - name: Run gate checks (placeholder)
        if: steps.decide.outputs.pass == 'true'
        run: |
          echo '{"metrics":{"win_rate":0.95},"threshold":0.5}' > results.json

      - name: Fail when label missing
        if: steps.decide.outputs.pass != 'true'
        run: |
          echo "driftguard label missing; failing gate"
          exit 1

      - name: Publish required status context
        if: always()
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO:  ${{ github.repository }}
          SHA:   ${{ github.sha }}
          RUNURL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          state="failure"
          [ "${{ steps.decide.outputs.pass }}" = "true" ] && state="success"
          curl -sS -o /tmp/status.json -w "HTTP:%{http_code}\n" \
            -X POST -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/statuses/${SHA}" \
            -d "{\"state\":\"${state}\",\"context\":\"Prompt Gate / prompt-gate-ci\",\"target_url\":\"${RUNURL}\",\"description\":\"gate ${state}\"}"
          echo "---- response ----"; cat /tmp/status.json || true
