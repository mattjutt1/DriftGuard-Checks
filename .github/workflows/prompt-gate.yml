name: Prompt Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch: {}

jobs:
  prompt-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Soft guard (run only if label present)
      run: |
        python - <<'PY'
        import json, os, sys
        ev=json.load(open(os.environ['GITHUB_EVENT_PATH']))
        names=[l['name'] for l in ev['pull_request'].get('labels',[])]
        if 'prompt-check' not in names:
            print('Label prompt-check not present; soft-skip.')
            open('results.json','w').write('{"skipped":true}')
            sys.exit(0)  # neutral
        PY

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install PromptOps SDK
      run: |
        cd library/
        pip install -e .

    - name: Run prompt evaluation
      id: eval
      env:
        PROMPTOPS_MODE: stub
        DISABLE_NETWORK: 1
      run: |
        promptops ci --config examples/.promptops.yml --out results.json

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prompt-evaluation-results
        path: results.json

    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Handle skipped case
          if (!fs.existsSync('results.json')) {
            const comment = `## üîá Prompt Gate Skipped

            The \`prompt-check\` label is not present on this PR. Add the label to enable prompt evaluation.

            [Learn more about Prompt Gate](../actions/runs/${context.runId})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            return;
          }

          const results = JSON.parse(fs.readFileSync('results.json', 'utf8'));

          // Handle skipped case from soft guard
          if (results.skipped) {
            const comment = `## üîá Prompt Gate Skipped

            The \`prompt-check\` label is not present on this PR. Add the label to enable prompt evaluation.

            <sub>This workflow runs offline with no API costs. [View setup guide ‚Üí](https://github.com/mattjutt1/prompt-wizard#prompt-gate-for-github)</sub>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            return;
          }

          const status = results.pass ? '‚úÖ PASSED' : '‚ùå FAILED';
          const statusIcon = results.pass ? '‚úÖ' : '‚ùå';
          const winRate = (results.metrics.win_rate * 100).toFixed(1);
          const threshold = (results.threshold * 100).toFixed(1);

          // Calculate simulated cost (mock pricing for demonstration)
          const promptCount = results.metrics.total_prompts || 0;
          const simulatedCost = (promptCount * 0.002).toFixed(4);

          const comment = statusIcon + ' Prompt Gate Results\n\n' +
            '**Status:** ' + status + '\n' +
            '**Win Rate:** ' + winRate + '% (threshold: ' + threshold + '%)\n' +
            '**Prompts Tested:** ' + promptCount + '\n' +
            '**Average Score:** ' + (results.metrics.avg_score ? results.metrics.avg_score.toFixed(3) : 'N/A') + '\n' +
            '**Simulated Cost:** $' + simulatedCost + '\n\n' +
            '[üìä View detailed results](../actions/runs/' + context.runId + ') ‚Ä¢ [üìÅ Download artifacts](../actions/runs/' + context.runId + '#artifacts)\n\n' +
            'This evaluation ran offline with no actual API costs. To enable real LLM providers, see the [setup guide](https://github.com/mattjutt1/prompt-wizard#llm-provider-configuration-offline-by-default).';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
