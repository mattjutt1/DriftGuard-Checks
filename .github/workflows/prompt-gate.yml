name: Prompt Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch: {}

jobs:
  prompt-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Soft guard (run only if label present)
      run: |
        python - <<'PY'
        import json, os, sys
        ev=json.load(open(os.environ['GITHUB_EVENT_PATH']))
        names=[l['name'] for l in ev['pull_request'].get('labels',[])]
        if 'prompt-check' not in names:
            print('Label prompt-check not present; soft-skip.')
            open('results.json','w').write('{"skipped":true}')
            sys.exit(0)  # neutral
        PY

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install PromptOps SDK
      run: |
        cd library/
        pip install -e .

    - name: Run prompt evaluation
      id: eval
      env:
        PROMPTOPS_MODE: stub
        DISABLE_NETWORK: 1
      run: |
        promptops ci --config examples/.promptops.yml --out results.json

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prompt-evaluation-results
        path: results.json

    - name: Write Prompt Gate summary
      if: always()
      run: |
        python - <<'PY'
        import json, os
        r = json.load(open('results.json'))
        status = "PASS" if r["metrics"]["win_rate"] >= r["threshold"] else "FAIL"
        with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as f:
            f.write("### Prompt Gate Results\n\n")
            f.write(f"- **Status:** {status}\n")
            f.write(f"- **Win rate:** {r['metrics']['win_rate']:.2%}\n")
            f.write(f"- **Threshold:** {r['threshold']:.2f}\n")
        PY

    - name: Enforce threshold for branch protection
      run: |
        python - <<'PY'
        import json, sys
        r = json.load(open('results.json'))
        if r["metrics"]["win_rate"] < r["threshold"]:
            print(f"❌ Prompt gate FAILED - Win rate {r['metrics']['win_rate']:.2%} below threshold {r['threshold']:.2f}")
            sys.exit(1)
        else:
            print(f"✅ Prompt gate PASSED - Win rate {r['metrics']['win_rate']:.2%} meets threshold {r['threshold']:.2f}")
        PY
