name: Prompt Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  gate:
    runs-on: ubuntu-latest
    env:
      PROMPTOPS_MODE: stub
      DISABLE_NETWORK: '1'

    steps:
    - uses: actions/checkout@v4

      # Soft-skip if the 'prompt-check' label is not present
    - name: Soft skip if label not present
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'prompt-check') }}
      run: |
        echo "prompt-check label not present; soft-skipping."
        echo "### Prompt Gate (skipped)" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Reason:** label not present" >> "$GITHUB_STEP_SUMMARY"

      # Setup Python 3.12 when the label IS present
    - name: Setup Python 3.12
      if: ${{ contains(github.event.pull_request.labels.*.name, 'prompt-check') }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install PromptOps (editable)
      if: ${{ contains(github.event.pull_request.labels.*.name, 'prompt-check') }}
      run: |
        python -m pip install -U pip
        cd library && pip install -e .[dev]

    - name: Ensure minimal .promptops.yml (demo)
      if: ${{ contains(github.event.pull_request.labels.*.name, 'prompt-check') }}
      run: |
        test -f .promptops.yml || printf "threshold: 0.85\ndataset: golden\n" > .promptops.yml
        echo "Using config:"; sed -n '1,120p' .promptops.yml

      # Run gate but DO NOT fail job here â€” we'll enforce in the next step
    - name: Run Prompt Gate (tolerate failure)
      if: ${{ contains(github.event.pull_request.labels.*.name, 'prompt-check') }}
      continue-on-error: true
      run: |
        set -xe
        promptops ci --config .promptops.yml --out results.json

      # ALWAYS write the summary and produce final pass/fail
    - name: Write summary & enforce
      if: always() && contains(github.event.pull_request.labels.*.name, 'prompt-check')
      run: |
        python - <<'PY'
        import json, os, sys, pathlib
        p = pathlib.Path("results.json")
        if not p.exists():
            with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as f:
                f.write("### Prompt Gate Results\n\n- **Status:** ERROR\n- **Reason:** results.json missing (CI step failed before writing)\n")
            sys.exit(1)
        r = json.load(p.open())
        wr, th = r["metrics"]["win_rate"], r["threshold"]
        status = "PASS" if wr >= th else "FAIL"
        with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as f:
            f.write(f"### Prompt Gate Results\n\n- **Status:** {status}\n- **Win rate:** {wr:.2%}\n- **Threshold:** {th:.2f}\n")
        sys.exit(0 if wr >= th else 1)
        PY

    - name: Upload results.json
      if: always() && contains(github.event.pull_request.labels.*.name, 'prompt-check')
      uses: actions/upload-artifact@v4
      with:
        name: prompt-eval
        path: results.json
