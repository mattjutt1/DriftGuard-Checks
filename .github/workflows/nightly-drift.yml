name: Nightly Drift Canary

on:
  schedule:
  - cron: 0 2 * * *      # Run at 2 AM UTC daily
  workflow_dispatch:  # Allow manual triggering

jobs:
  nightly:
    runs-on: ubuntu-latest

    env:
      PROMPTOPS_MODE: stub
      DISABLE_NETWORK: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install PromptOps SDK
      run: |
        cd library/
        pip install -e .

    - name: Create nightly config
      run: |
        echo 'threshold: 0.85' > .promptops.yml
        echo 'dataset: nightly_golden' >> .promptops.yml

    - name: Run nightly canary evaluation
      id: eval
      run: |
        cd library
        promptops ci --config ../.promptops.yml --out ../nightly-results.json

    - name: Upload nightly results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: nightly-evaluation-results
        path: nightly-results.json

    - name: Slack notify (conditional)
      if: always()
      env:
        ALLOW_NETWORK: ${{ secrets.ALLOW_NETWORK || '0' }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python - <<'PY'
        import os, json, sys

        # Read results
        try:
            with open('nightly-results.json', 'r') as f:
                data = json.load(f)
        except Exception as e:
            print(f"Failed to read results: {e}")
            sys.exit(0)

        allow = os.getenv('ALLOW_NETWORK') == '1'
        url = os.getenv('SLACK_WEBHOOK_URL')

        # Determine status and message
        if data.get('skipped'):
            status = "⏭️ SKIPPED"
            message = "Nightly canary skipped (no prompt-check label)"
        elif data.get('pass', False):
            status = "✅ PASSED"
            win_rate = data['metrics']['win_rate'] * 100
            message = f"Nightly canary passed with {win_rate:.1f}% win rate"
        else:
            status = "❌ FAILED"
            win_rate = data['metrics']['win_rate'] * 100
            threshold = data.get('threshold', 0.85) * 100
            message = f"Nightly canary failed: {win_rate:.1f}% < {threshold:.1f}% threshold"

        full_message = f"[DriftGuard] {status}: {message}"
        print(f"Notification: {full_message}")

        # Send to Slack if enabled
        if allow and url:
            try:
                import requests

                payload = {
                    "text": full_message,
                    "username": "DriftGuard Nightly",
                    "icon_emoji": ":night_with_stars:",
                    "attachments": [
                        {
                            "color": "good" if data.get('pass', False) else "danger" if not data.get('skipped') else "warning",
                            "fields": [
                                {
                                    "title": "Win Rate",
                                    "value": f"{data.get('metrics', {}).get('win_rate', 0) * 100:.1f}%",
                                    "short": True
                                },
                                {
                                    "title": "Total Prompts",
                                    "value": str(data.get('metrics', {}).get('total_prompts', 0)),
                                    "short": True
                                }
                            ]
                        }
                    ]
                }

                response = requests.post(url, json=payload, timeout=10)
                if response.status_code == 200:
                    print("✅ Posted to Slack successfully")
                else:
                    print(f"⚠️ Slack API returned {response.status_code}: {response.text}")

            except requests.RequestException as e:
                print(f"❌ Network error posting to Slack: {e}")
            except ImportError:
                print("❌ requests library not available")
        else:
            print("🔒 Offline mode: no Slack notification sent")
            if not allow:
                print("   Set ALLOW_NETWORK=1 secret to enable")
            if not url:
                print("   Set SLACK_WEBHOOK_URL secret to enable")
        PY

    - name: Comment on recent PRs (if failure)
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let results;
          try {
            results = JSON.parse(fs.readFileSync('nightly-results.json', 'utf8'));
          } catch (e) {
            console.log('No results file found, skipping PR comment');
            return;
          }

          if (results.pass || results.skipped) {
            console.log('Canary passed or skipped, no PR comment needed');
            return;
          }

          // Find recent PRs to comment on
          const { data: pulls } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 3
          });

          const winRate = (results.metrics.win_rate * 100).toFixed(1);
          const threshold = ((results.threshold || 0.85) * 100).toFixed(1);

          const comment = `## 🚨 Nightly Canary Alert

          **Status:** ❌ FAILED
          **Win Rate:** ${winRate}% (threshold: ${threshold}%)
          **Timestamp:** ${new Date().toISOString()}

          The nightly prompt quality canary has detected a regression. Please review recent changes to prompt templates or evaluation criteria.

          _This is an automated message from the DriftGuard nightly canary._`;

          // Comment on recent PRs
          for (const pull of pulls) {
            try {
              await github.rest.issues.createComment({
                issue_number: pull.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log(`Commented on PR #${pull.number}`);
            } catch (error) {
              console.log(`Failed to comment on PR #${pull.number}: ${error.message}`);
            }
          }
