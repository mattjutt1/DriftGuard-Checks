# PromptEvolver 3.0 - Completeness Dimension Judge Rubric
# Evaluating prompt comprehensiveness and coverage of necessary aspects (Score: 0.0-1.0)

## SCORING CRITERIA: COMPLETENESS DIMENSION

### Score: 0.9-1.0 (Exceptional Completeness)
**Definition**: Comprehensive coverage of all necessary aspects with no significant gaps or missing elements

**Characteristics**:
- All critical requirements and specifications included
- Context, constraints, and success criteria fully defined
- Input/output specifications complete and detailed
- Quality standards and evaluation criteria specified
- Timeline, resources, and dependencies addressed
- Edge cases and potential issues anticipated
- No essential information missing for successful execution

**Examples**:
- ✅ "**Project**: Enterprise Customer Analytics Dashboard

  **Role**: Senior Business Intelligence Developer with 5+ years experience

  **Business Context**:
  - Supporting 250-person sales organization across 3 regions
  - Executive team needs real-time customer insights for Q4 strategic planning
  - Integration with existing Salesforce CRM and HubSpot Marketing systems
  - Budget approved: $75K development, $15K monthly hosting

  **Technical Requirements**:
  - Platform: Power BI Premium with custom visuals
  - Data Sources: Salesforce (CRM), HubSpot (marketing), SQL Server (transactions)
  - Real-time updates: 15-minute refresh cycle
  - User Access: 25 executives (view), 5 analysts (edit), 2 admins (full control)
  - Security: SSO integration with Azure AD, row-level security by region

  **Dashboard Specifications**:
  - **Overview Page**: Executive KPIs (Customer Lifetime Value, Churn Rate, Acquisition Cost)
  - **Customer Health Page**: Risk scoring, engagement metrics, support ticket trends
  - **Sales Performance Page**: Pipeline analysis, conversion rates, rep performance
  - **Market Analysis Page**: Segment performance, competitive intelligence, growth opportunities
  - **Export Features**: Automated PDF reports, Excel downloads, API access

  **Data Requirements**:
  - Historical data: 3 years minimum for trend analysis
  - Customer segmentation: Industry, size, region, lifecycle stage
  - Performance metrics: Revenue, engagement, support interactions, marketing touchpoints
  - Predictive elements: Churn probability, upsell likelihood, renewal forecasting

  **Quality Standards**:
  - Load time: <5 seconds for standard views, <15 seconds for complex analytics
  - Accuracy: 99.5% data integrity with automated validation checks
  - Availability: 99.9% uptime with scheduled maintenance windows
  - Mobile responsiveness: Full functionality on tablets, key metrics on phones

  **Deliverables**:
  - Production dashboard with all specified features
  - User training materials and documentation
  - Data refresh monitoring and alerting setup
  - 90-day warranty with bug fixes and minor enhancements

  **Timeline**:
  - Week 1-2: Requirements validation and technical architecture
  - Week 3-4: Data integration and ETL pipeline development
  - Week 5-6: Dashboard development and initial testing
  - Week 7-8: User acceptance testing and training
  - Week 9: Production deployment and monitoring setup

  **Success Criteria**:
  - Executive adoption: 90% weekly active usage within 30 days
  - Performance targets: All dashboards load within specified time limits
  - User satisfaction: 4.5/5 rating in post-deployment survey
  - Business impact: Enable data-driven decision making for Q4 strategic planning"

**Evidence to Look For**:
- Complete context including business background and constraints
- Comprehensive technical specifications and requirements
- Full deliverable specifications with quality criteria
- Timeline, resources, and success metrics defined
- Risk considerations and contingency planning included

### Score: 0.7-0.8 (High Completeness)
**Definition**: Mostly complete with comprehensive coverage, minor gaps that don't significantly impact execution

**Characteristics**:
- Major requirements and specifications covered thoroughly
- Good context and background information provided
- Most critical elements defined and detailed
- Minor gaps in non-essential areas
- Sufficient information for professional implementation
- Quality standards generally specified

**Examples**:
- ✅ "**Project**: E-commerce Website Development

  **Role**: Full-stack developer with React and Node.js experience

  **Requirements**:
  - Frontend: React 18, TypeScript, Tailwind CSS, responsive design
  - Backend: Node.js, Express, PostgreSQL, JWT authentication
  - Features: Product catalog, shopping cart, payment processing, user accounts
  - Performance: <3 second load times, mobile-optimized
  - Security: HTTPS, input validation, secure payment processing

  **Deliverables**:
  - Fully functional website with all specified features
  - Admin dashboard for product and order management
  - Documentation and deployment guide
  - 30 days post-launch support

  **Timeline**: 8-week development cycle with weekly milestone reviews"

  ⚠️ Good coverage of major elements but missing some details like specific business context, detailed success criteria, budget constraints, or comprehensive quality standards

**Evidence to Look For**:
- 80-90% of critical requirements specified
- Good coverage of technical and functional requirements
- Major deliverables and timeline defined
- Some minor gaps in context or quality criteria
- Sufficient for experienced professionals to execute successfully

### Score: 0.5-0.6 (Moderate Completeness)
**Definition**: Reasonable coverage but missing some important elements, moderate gaps present

**Characteristics**:
- Basic requirements and specifications provided
- Some context and background information given
- Major elements covered but lacking detail
- Several important aspects undefined or vague
- Adequate for basic implementation but may require clarification
- Limited quality standards or success criteria

**Examples**:
- ⚠️ "Create a mobile app for food delivery:
  - Native iOS and Android development
  - User registration and login
  - Restaurant browsing and menu display
  - Order placement and payment processing
  - Real-time order tracking
  - Push notifications for order updates
  - Admin panel for restaurant management
  - 3-month development timeline"

  ⚠️ Basic requirements covered but missing technical specifications, design requirements, performance criteria, business context, detailed success metrics

**Evidence to Look For**:
- 60-70% of requirements have adequate detail
- Basic functional specifications provided
- Limited context or background information
- Some quality standards but not comprehensive
- Missing several important implementation details

### Score: 0.3-0.4 (Low Completeness)
**Definition**: Some coverage but significant gaps, missing many important elements

**Characteristics**:
- Limited requirements and specifications
- Minimal context or background information
- Many critical elements undefined
- Significant areas requiring assumption or clarification
- Insufficient information for professional implementation
- Quality standards largely absent

**Examples**:
- ❌ "Build a website for a restaurant:
  - Show menu and contact information
  - Online ordering capability
  - Make it look professional
  - Mobile-friendly design
  - Connect to payment system"

  ❌ Very basic requirements without technical specifications, design details, business context, success criteria, or implementation guidance

**Evidence to Look For**:
- 40-60% of basic requirements mentioned
- Missing technical specifications and quality standards
- Little to no business context or constraints
- Vague success criteria or none at all
- Significant assumptions required for implementation

### Score: 0.0-0.2 (Poor Completeness)
**Definition**: Incomplete, missing critical information, insufficient for execution

**Characteristics**:
- Minimal or no specific requirements
- Missing essential context and background
- Critical elements completely undefined
- Impossible to execute without extensive clarification
- No quality standards or success criteria
- Lacks fundamental project information

**Examples**:
- ❌ "Create a system for managing customers"
- ❌ "Build an application that helps with business operations"
- ❌ "Make a website that works well"
- ❌ No specific requirements, context, or implementation guidance

**Evidence to Look For**:
- Less than 40% of basic requirements specified
- No technical specifications or constraints
- Missing fundamental context and purpose
- No success criteria or quality standards
- Requires complete specification by implementer

## COMPLETENESS EVALUATION FRAMEWORK

### Essential Information Categories

#### 1. Context and Background
- **Business Context**: Why this work is needed, organizational background
- **Stakeholder Information**: Who will use, approve, or benefit from the work
- **Constraints**: Budget, timeline, resource, and regulatory limitations
- **Dependencies**: Other projects, systems, or decisions that impact this work

#### 2. Functional Requirements
- **Core Features**: Primary capabilities and functionality required
- **User Stories**: How different users will interact with the deliverable
- **Workflow Requirements**: Process flows and user journey specifications
- **Integration Needs**: How this connects with existing systems or processes

#### 3. Technical Specifications
- **Technology Stack**: Specific tools, frameworks, and platforms required
- **Performance Requirements**: Speed, scalability, and reliability specifications
- **Security Requirements**: Data protection, access control, compliance needs
- **Quality Standards**: Code quality, testing, and documentation requirements

#### 4. Design and User Experience
- **Visual Requirements**: Branding, style guides, and aesthetic preferences
- **User Experience**: Accessibility, usability, and interaction patterns
- **Content Requirements**: Text, images, data, and media specifications
- **Responsive Design**: Multi-device and cross-platform requirements

#### 5. Project Management Elements
- **Timeline**: Milestones, deadlines, and delivery schedule
- **Resources**: Budget, team members, tools, and external services
- **Communication**: Reporting requirements and stakeholder updates
- **Risk Management**: Potential issues and mitigation strategies

#### 6. Quality and Success Criteria
- **Acceptance Criteria**: Specific requirements for considering work complete
- **Performance Metrics**: Measurable success indicators and KPIs
- **Testing Requirements**: Quality assurance and validation processes
- **Post-Delivery Support**: Maintenance, updates, and ongoing support needs

## COMMON COMPLETENESS SCORING PITFALLS

### Over-Generous Scoring
- Don't assume implied requirements that aren't explicitly stated
- Avoid crediting "standard industry practices" as completeness
- Don't award high scores for basic checklists without detail
- Require actual specification, not just mention of requirement categories

### Under-Generous Scoring
- Consider domain-appropriate level of specification detail
- Account for audience expertise in evaluating completeness needs
- Recognize when over-specification would be counterproductive
- Don't penalize concise completeness in favor of verbose incompleteness

### Domain Context Errors
- Different domains require different levels of specification
- Technical projects need different completeness than creative projects
- Consider project phase (discovery vs. implementation vs. maintenance)
- Evaluate completeness relative to project complexity and scope

## EVALUATION QUESTIONS FOR COMPLETENESS ASSESSMENT

1. **Information Sufficiency**: Is there enough information to execute this successfully?
2. **Context Adequacy**: Do I understand why this work is needed and how it fits?
3. **Requirement Coverage**: Are all major functional and technical requirements specified?
4. **Success Definition**: Do I know what constitutes successful completion?
5. **Constraint Clarity**: Are limitations, constraints, and dependencies clear?
6. **Quality Expectations**: Are standards and quality criteria explicitly defined?

## COMPLETENESS PATTERNS BY SCORE LEVEL

### Exceptional Completeness Patterns (0.9-1.0)

#### The COMPLETE Framework
- **Context**: Full business background and justification
- **Objectives**: Clear goals and success criteria
- **Methods**: Specific approaches and technical requirements
- **Parameters**: Detailed specifications and constraints
- **Logistics**: Timeline, resources, and project management
- **Evaluation**: Quality standards and acceptance criteria
- **Timeline**: Milestones and delivery schedule
- **Extensions**: Post-delivery support and future considerations

### High Completeness Patterns (0.7-0.8)

#### The 6W+H Framework
- **Who**: Stakeholders, users, and team members
- **What**: Deliverables and functional requirements
- **When**: Timeline and milestone schedule
- **Where**: Platform, environment, and deployment
- **Why**: Business justification and value proposition
- **Which**: Technology choices and approach selection
- **How**: Implementation methodology and quality standards

## COMPARATIVE EXAMPLES BY SCORE RANGE

### Completeness Enhancement Transformations

**Score 0.2 → 0.9 Transformation**:
- Before: "Create a dashboard for sales data"
- After: "**Sales Performance Dashboard Development**

  **Business Context**: Regional sales team (50 reps) needs real-time visibility into pipeline performance to meet Q4 revenue targets ($12M goal, currently tracking at 85%). Dashboard will replace manual Excel reporting that takes 8 hours weekly per manager.

  **User Requirements**:
  - Sales Managers: Pipeline forecasting, rep performance, territory analysis
  - VPs: Executive summary, trend analysis, competitive intelligence
  - Reps: Personal performance tracking, goal progress, commission calculation

  **Technical Specifications**:
  - Platform: Tableau Server with mobile app integration
  - Data Sources: Salesforce CRM (primary), marketing automation, customer support
  - Update Frequency: Real-time for active deals, nightly batch for historical analysis
  - Security: Role-based access control, data encryption, audit logging

  **Dashboard Features**:
  - **Executive Summary**: Revenue vs. target, pipeline health, forecasting accuracy
  - **Pipeline Analysis**: Deal progression, stage velocity, bottleneck identification
  - **Performance Management**: Individual and team metrics, goal tracking, rankings
  - **Territory Intelligence**: Geographic performance, market penetration, opportunity mapping

  **Quality Requirements**:
  - Performance: <3 second load time for standard views
  - Accuracy: 99.5% data consistency with CRM
  - Availability: 99.9% uptime during business hours (6 AM - 8 PM EST)
  - Mobile: Full functionality on tablets, key metrics accessible on phones

  **Deliverables**:
  - Production dashboard with all specified features and security controls
  - User training program (2-hour session + documentation)
  - Administrative documentation and maintenance procedures
  - 90-day warranty with bug fixes and minor enhancements

  **Project Timeline**: 6-week development cycle:
  - Week 1: Requirements validation and data architecture
  - Week 2-3: Dashboard development and testing
  - Week 4: User acceptance testing and feedback integration
  - Week 5: Training delivery and production deployment
  - Week 6: Performance optimization and warranty period start

  **Success Metrics**:
  - User adoption: 95% weekly active usage within 30 days
  - Efficiency: 75% reduction in manual reporting time
  - Accuracy: Improved forecast accuracy from 78% to 90%
  - Business impact: Support achievement of Q4 revenue targets"

## SCORING CONSISTENCY GUIDELINES

### Completeness Score Validation Checklist

**Score 0.9-1.0 Requirements**:
- [ ] Complete business context and justification provided
- [ ] All functional and technical requirements specified in detail
- [ ] Quality standards and success criteria clearly defined
- [ ] Timeline, resources, and project management elements included
- [ ] Risk considerations and contingency planning addressed
- [ ] Post-delivery support and maintenance requirements specified

**Score 0.7-0.8 Requirements**:
- [ ] Major requirements and specifications covered thoroughly
- [ ] Good business context and background information
- [ ] Most critical elements defined with adequate detail
- [ ] Quality standards generally specified
- [ ] Timeline and deliverables clearly outlined

**Score 0.5-0.6 Requirements**:
- [ ] Basic requirements and specifications provided
- [ ] Some business context and background given
- [ ] Major functional elements covered but may lack detail
- [ ] Limited quality standards or success criteria
- [ ] Basic project timeline and deliverable information

## DOMAIN-SPECIFIC COMPLETENESS REQUIREMENTS

### Analytics Domain Completeness Checklist
- [ ] **Data Sources**: Specific systems, formats, quality expectations
- [ ] **Analysis Scope**: Time periods, segments, metrics to be analyzed
- [ ] **Statistical Requirements**: Confidence levels, significance tests, validation methods
- [ ] **Visualization Needs**: Chart types, interactivity, export formats
- [ ] **Business Context**: Decision-making context, stakeholder needs
- [ ] **Output Format**: Reports, presentations, dashboards, data exports
- [ ] **Success Criteria**: Accuracy requirements, insight quality, impact measurement

### Coding Domain Completeness Checklist
- [ ] **Technical Stack**: Languages, frameworks, versions, dependencies
- [ ] **Functional Requirements**: Features, user stories, acceptance criteria
- [ ] **Non-Functional Requirements**: Performance, security, scalability, reliability
- [ ] **Architecture**: Design patterns, system integration, data flow
- [ ] **Quality Standards**: Code review, testing, documentation, deployment
- [ ] **Environment Specifications**: Development, testing, production setups
- [ ] **Maintenance Requirements**: Updates, monitoring, support processes

### Content Domain Completeness Checklist
- [ ] **Audience Definition**: Demographics, psychographics, needs, context
- [ ] **Content Specifications**: Type, length, format, structure, tone
- [ ] **Brand Guidelines**: Voice, style, visual elements, compliance requirements
- [ ] **Distribution Plan**: Channels, timing, optimization, measurement
- [ ] **Quality Standards**: Editorial guidelines, review process, approval workflow
- [ ] **Performance Metrics**: Engagement goals, conversion targets, success measurement
- [ ] **Resource Requirements**: Content creation tools, review team, timeline

### Cross-Domain Completeness Checklist
- [ ] **Scope Definition**: Clear boundaries for each domain involvement
- [ ] **Integration Requirements**: How domains connect and interact
- [ ] **Coordination Protocols**: Communication, review, approval processes
- [ ] **Resource Allocation**: Budget, timeline, team assignments across domains
- [ ] **Quality Standards**: Domain-specific and integrated success criteria
- [ ] **Risk Management**: Domain-specific and integration risks identified
- [ ] **Success Measurement**: Overall project and domain-specific metrics

## QUALITY ASSURANCE FOR COMPLETENESS SCORING

### Completeness Audit Process
1. **Requirements Mapping**: List all stated requirements and specifications
2. **Gap Analysis**: Identify missing critical information categories
3. **Context Evaluation**: Assess business background and constraint information
4. **Success Criteria Review**: Evaluate quality standards and acceptance criteria
5. **Implementation Readiness**: Determine if sufficient information exists for execution

### Evidence Documentation Requirements
For each completeness score, document:
- **Coverage Analysis**: Percentage of critical requirements specified
- **Missing Elements**: Key information gaps that would impede execution
- **Context Quality**: Adequacy of business background and constraints
- **Success Definition**: Clarity and specificity of completion criteria
- **Implementation Readiness**: Assessment of information sufficiency for professional execution

---
**Copyright (c) 2025 Matthew J. Utt**
**PromptEvolver 3.0 Training System - Completeness Rubric**
**Licensed under MIT License - Compatible with Microsoft PromptWizard Framework**
