# Edge Cases (Testing System Boundaries)
# These prompts test the evaluation system's ability to handle boundary conditions

prompts:
- title: Extremely Minimal
  description: Tests minimum viable prompt detection
  content: Fix bug.
  quality_score: 0.05
  edge_case_type: minimal_content
  evaluation_notes: Should clearly fail - no context whatsoever

- title: Single Word
  description: Tests single-word prompt handling
  content: Code.
  quality_score: 0.02
  edge_case_type: single_word
  evaluation_notes: Should fail - no meaningful content

- title: Extremely Verbose
  description: Tests handling of overly complex, unfocused prompts
  content: |
    Create a comprehensive enterprise-grade microservices architecture with event-driven patterns, CQRS implementation, distributed caching strategies using Redis and Hazelcast with consistent hashing, advanced monitoring and observability with Prometheus, Grafana, Jaeger distributed tracing, ELK stack for centralized logging, automated deployment pipelines using GitOps with ArgoCD and Tekton, service mesh configuration with Istio including traffic management, security policies, and circuit breaking, database sharding approaches with automatic failover and read replicas, security hardening measures including OAuth2, JWT tokens, API gateways with rate limiting, WAF protection, vulnerability scanning, penetration testing frameworks, performance optimization techniques including connection pooling, query optimization, caching layers, CDN integration, disaster recovery procedures with RTO/RPO requirements, backup strategies, cross-region replication, compliance frameworks for SOX, HIPAA, GDPR, PCI-DSS with audit trails, data lineage tracking, and scalability planning for handling millions of concurrent users while maintaining sub-100ms response times across all services with 99.99% uptime guarantees and full audit trails for regulatory compliance in highly regulated industries including financial services, healthcare, and government contracts.
  quality_score: 0.45
  edge_case_type: excessive_complexity
  evaluation_notes: Should fail due to overwhelming scope and lack of focus

- title: Technical Jargon Heavy
  description: Tests handling of domain-specific technical language
  content: |
    λ f x y → (f x y) ∘ (g ∘ h) where g = curry(uncurry(id)) and h = flip const
    Implement this in Haskell with proper type signatures and explain the category theory
    implications including the relationship to Kleisli categories and the monad laws.
  quality_score: 0.65
  edge_case_type: domain_jargon
  evaluation_notes: Boundary case - technical but lacks practical context

- title: Multiple Languages Mixed
  description: Tests multilingual prompt handling
  content: |
    Write a función en Python que calculate the fibonacci sequence using memoização,
    but explain it in English avec des commentaires en français.
    Include 日本語 variable names for internationalization.
  quality_score: 0.40
  edge_case_type: multilingual
  evaluation_notes: Should fail due to language mixing causing confusion

- title: Contradictory Requirements
  description: Tests handling of conflicting specifications
  content: |
    Create a simple, minimalist web page that includes comprehensive features like:
    - Advanced user authentication with 2FA, OAuth, and biometric login
    - Real-time chat, video calls, and screen sharing
    - Complex data visualizations with interactive charts and dashboards
    - Machine learning recommendations engine
    - Blockchain integration for payments

    Keep it basic and easy to implement in one HTML file.
  quality_score: 0.35
  edge_case_type: contradictory
  evaluation_notes: Should fail due to contradictory simple vs complex requirements

- title: Reasonable but Minimal
  description: Tests boundary between minimal and acceptable
  content: |
    Write a Python function to calculate Fibonacci numbers.
    Include error handling for invalid input.
    Add docstring with example usage.
  quality_score: 0.78
  edge_case_type: minimal_acceptable
  evaluation_notes: Boundary case - minimal but has core requirements

- title: Good Structure, No Domain Context
  description: Tests well-formatted but context-free prompts
  content: |
    Create a solution that:
    1. Takes input from users
    2. Processes the data efficiently
    3. Returns appropriate output
    4. Handles errors gracefully
    5. Includes comprehensive testing

    Requirements:
    - High performance
    - Scalable architecture
    - Modern best practices
    - Full documentation
  quality_score: 0.60
  edge_case_type: structure_no_context
  evaluation_notes: Good structure but lacks specific domain or use case

- title: Academic Paper Style
  description: Tests handling of formal academic language
  content: |
    Pursuant to the aforementioned computational paradigms and in consideration of
    the extant literature regarding algorithmic complexity optimization, one must
    endeavor to instantiate a methodology whereby the implementation of said
    computational construct shall facilitate the requisite functionality whilst
    maintaining adherence to established principles of software engineering
    methodology as delineated in contemporary peer-reviewed publications.
  quality_score: 0.25
  edge_case_type: academic_verbose
  evaluation_notes: Should fail - overly verbose with no clear actionable request

- title: Question Only
  description: Tests prompts that only ask questions without requests
  content: |
    What is the best way to handle user authentication?
    Which database should I use?
    How do I deploy to production?
    What about security?
  quality_score: 0.50
  edge_case_type: questions_only
  evaluation_notes: Boundary case - questions without implementation requests

# Edge Case Categories:
# 1. **minimal_content** - Tests lower bounds of content requirements
# 2. **excessive_complexity** - Tests upper bounds of reasonable scope
# 3. **domain_jargon** - Tests handling of specialized technical language
# 4. **multilingual** - Tests language mixing and confusion
# 5. **contradictory** - Tests conflicting requirements detection
# 6. **minimal_acceptable** - Tests threshold boundaries
# 7. **structure_no_context** - Tests form vs substance evaluation
# 8. **academic_verbose** - Tests verbosity without clarity
# 9. **questions_only** - Tests prompts without actionable requests

# Expected Evaluation Behavior:
# - Clear fails: <0.60 (minimal, contradictory, excessive)
# - Boundary cases: 0.60-0.80 (may pass or fail depending on evaluation criteria)
# - Context-dependent: 0.65-0.75 (technical jargon with some merit)
# - Threshold tests: 0.75-0.85 (minimal but acceptable prompts)
