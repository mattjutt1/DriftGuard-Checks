# PromptEvolver 3.0 - Error Prevention Dimension Judge Rubric
# Evaluating prompt safeguards against common mistakes and misunderstandings (Score: 0.0-1.0)

## SCORING CRITERIA: ERROR PREVENTION DIMENSION

### Score: 0.9-1.0 (Exceptional Error Prevention)
**Definition**: Excellent safeguards against common mistakes with comprehensive error prevention mechanisms

**Characteristics**:
- Anticipates and addresses common failure modes and edge cases
- Provides clear validation criteria and quality checkpoints
- Includes specific warnings about potential pitfalls and misconceptions
- Offers fallback strategies and contingency plans
- Defines input validation and output verification requirements
- Prevents ambiguous interpretations through precise specification
- Includes error recovery and correction guidance

**Examples**:
- ✅ "**Database Migration Script Development**

  **Role**: Senior Database Administrator with PostgreSQL expertise

  **Critical Safety Requirements**:
  ⚠️ **MANDATORY PRE-EXECUTION CHECKS**:
  - Verify full database backup completed within last 24 hours
  - Confirm script tested successfully on staging environment (minimum 3 runs)
  - Validate all table names and column references against current schema
  - Check disk space: minimum 50% free space before execution

  **Error Prevention Protocols**:
  - **Transaction Wrapping**: All operations must be wrapped in explicit transactions with rollback capability
  - **Batch Size Limits**: Process maximum 10,000 records per batch to prevent memory issues
  - **Progress Logging**: Log every 1,000 records processed with timestamp and error count
  - **Validation Queries**: Include before/after row count verification for each table

  **Common Pitfall Avoidance**:
  - ❌ **NEVER** run migration during business hours (9 AM - 6 PM EST)
  - ❌ **NEVER** skip foreign key constraint validation
  - ⚠️ **WARNING**: DateTime conversions from UTC to local time - verify timezone handling
  - ⚠️ **WARNING**: NULL value handling - define explicit behavior for each nullable field

  **Quality Assurance Requirements**:
  - Dry-run mode: Execute with ROLLBACK to verify logic without permanent changes
  - Data integrity checks: Compare checksums before and after migration
  - Performance monitoring: Script must complete within 4-hour maintenance window
  - Rollback procedures: Document exact steps to reverse migration if issues occur

  **Output Validation**:
  - Migration log with success/failure status for each operation
  - Data quality report comparing pre/post migration statistics
  - Performance report showing execution time for each major operation
  - Error report with detailed information about any failures encountered"

**Evidence to Look For**:
- Specific warnings about common mistakes and edge cases
- Validation requirements and quality checkpoints
- Clear safety protocols and pre-execution checks
- Fallback strategies and error recovery procedures
- Input validation and output verification requirements

### Score: 0.7-0.8 (High Error Prevention)
**Definition**: Good error prevention with most issues addressed, includes important safeguards

**Characteristics**:
- Addresses major common mistakes and issues
- Provides key validation requirements
- Includes important warnings and cautions
- Some fallback strategies or error handling guidance
- Clear quality checkpoints for major deliverables
- Prevents most likely sources of confusion or mistakes

**Examples**:
- ✅ "**E-commerce Checkout System Development**

  **Important Security Requirements**:
  - Use HTTPS for all payment-related communications
  - Validate all user inputs before processing (SQL injection prevention)
  - Implement proper session management with secure tokens
  - Never store credit card information in local database

  **Testing Requirements**:
  - Test with multiple payment methods and edge cases
  - Verify error handling for declined payments and network failures
  - Validate inventory checking to prevent overselling
  - Test mobile responsiveness across different screen sizes

  **Common Issues to Avoid**:
  - Ensure proper decimal handling for currency calculations
  - Implement timeout handling for payment processing
  - Validate shipping address formats for different countries
  - Include proper error messages that don't expose system internals"

  ⚠️ Good coverage of major risks but could include more specific validation protocols and fallback procedures

**Evidence to Look For**:
- Key safety requirements and security considerations
- Important validation and testing requirements
- Warnings about common technical pitfalls
- Basic error handling and edge case considerations
- Quality checkpoints for critical functionality

### Score: 0.5-0.6 (Moderate Error Prevention)
**Definition**: Some error prevention but gaps remain, basic safeguards present

**Characteristics**:
- Basic error prevention considerations included
- Some validation requirements mentioned
- Limited warnings about potential issues
- Minimal fallback or recovery guidance
- Basic quality standards but not comprehensive
- Addresses obvious issues but may miss subtle problems

**Examples**:
- ⚠️ "**Website Development Project**

  **Basic Requirements**:
  - Ensure website works on mobile devices
  - Include contact form validation for required fields
  - Test website on different browsers (Chrome, Firefox, Safari)
  - Make sure images load properly and aren't too large

  **Quality Checks**:
  - Check for broken links before launch
  - Verify contact form sends emails correctly
  - Ensure website loads in under 5 seconds
  - Test user registration and login functionality"

  ⚠️ Basic quality checks but missing specific validation protocols, security considerations, and detailed error handling

**Evidence to Look For**:
- Basic validation and testing requirements
- Some quality standards and checkpoints
- Limited warnings about potential issues
- Basic browser/device compatibility considerations
- Minimal error handling guidance

### Score: 0.3-0.4 (Low Error Prevention)
**Definition**: Limited error prevention, significant gaps in safeguards

**Characteristics**:
- Minimal consideration of potential problems
- Few or no validation requirements
- Limited quality standards
- No specific warnings about common pitfalls
- Insufficient error handling or recovery planning
- May overlook critical failure modes

**Examples**:
- ❌ "Create a user registration system with password requirements and email verification. Make sure it works properly and is secure."
- ❌ Very general requirements without specific validation, security protocols, or error handling details

**Evidence to Look For**:
- Vague quality requirements without specifics
- Missing validation and security considerations
- No specific warnings about potential issues
- Insufficient testing or verification requirements
- Limited consideration of edge cases or failure modes

### Score: 0.0-0.2 (Poor Error Prevention)
**Definition**: No error prevention safeguards, likely to cause mistakes and failures

**Characteristics**:
- No consideration of potential problems or failures
- No validation requirements or quality standards
- No warnings about pitfalls or common mistakes
- No error handling or recovery guidance
- May actually encourage risky practices
- Completely reactive rather than preventive approach

**Examples**:
- ❌ "Build a system that handles user data"
- ❌ "Create a payment processing feature"
- ❌ "Make a database for storing information"
- ❌ No safety considerations, validation requirements, or error prevention measures

**Evidence to Look For**:
- Complete absence of safety or validation requirements
- No warnings about potential issues or risks
- No quality standards or checkpoints
- No consideration of error handling or edge cases
- May implicitly encourage unsafe practices

## ERROR PREVENTION EVALUATION FRAMEWORK

### Critical Error Prevention Categories

#### 1. Input Validation and Sanitization
- **Data Type Validation**: Ensuring inputs match expected formats and types
- **Range and Boundary Checks**: Preventing overflow, underflow, and out-of-range values
- **Injection Attack Prevention**: SQL injection, XSS, command injection safeguards
- **Format Validation**: Email addresses, phone numbers, dates, URLs

#### 2. Security and Privacy Safeguards
- **Authentication and Authorization**: Proper user verification and access control
- **Data Protection**: Encryption, secure storage, and transmission requirements
- **Privacy Compliance**: GDPR, CCPA, and other privacy regulation adherence
- **Audit and Logging**: Security event tracking and monitoring requirements

#### 3. System Reliability and Recovery
- **Error Handling**: Graceful failure and user-friendly error messages
- **Backup and Recovery**: Data backup and disaster recovery procedures
- **Transaction Management**: Atomic operations and rollback capabilities
- **Monitoring and Alerting**: System health monitoring and failure detection

#### 4. User Experience Protection
- **Accessibility Compliance**: WCAG guidelines and inclusive design principles
- **Performance Safeguards**: Load time limits and resource usage monitoring
- **Cross-Platform Compatibility**: Browser, device, and operating system testing
- **Usability Testing**: User flow validation and confusion prevention

#### 5. Business Logic Protection
- **Workflow Validation**: Business rule enforcement and process integrity
- **Data Consistency**: Referential integrity and constraint validation
- **Concurrency Control**: Multi-user access and race condition prevention
- **Business Rule Compliance**: Industry regulations and internal policy adherence

#### 6. Development and Deployment Safety
- **Code Quality Standards**: Review processes and quality metrics
- **Testing Requirements**: Unit, integration, and system testing protocols
- **Deployment Safeguards**: Staging, rollback, and production deployment procedures
- **Version Control**: Change tracking and release management

## COMMON ERROR PREVENTION SCORING PITFALLS

### Over-Generous Scoring
- Don't award high scores for basic quality mentions without specifics
- Avoid crediting implied safety measures that aren't explicitly stated
- Don't assume industry standard practices count as error prevention
- Require actual preventive measures, not just reactive error handling

### Under-Generous Scoring
- Consider domain-appropriate levels of error prevention detail
- Recognize when over-specification of safety measures would be counterproductive
- Account for audience expertise in evaluating needed safeguards
- Don't penalize concise but effective error prevention guidance

### Domain Context Errors
- Different domains have different critical error types
- Security-focused domains require different safeguards than creative domains
- Consider the severity and likelihood of potential failures
- Evaluate prevention measures against actual risk levels

## EVALUATION QUESTIONS FOR ERROR PREVENTION ASSESSMENT

1. **Risk Anticipation**: Does this prompt identify and address likely failure modes?
2. **Validation Coverage**: Are input validation and output verification requirements specified?
3. **Safety Protocols**: Are there clear safety measures and quality checkpoints?
4. **Error Recovery**: Is guidance provided for handling and recovering from errors?
5. **Edge Case Handling**: Are unusual or boundary conditions anticipated and addressed?
6. **User Protection**: Are safeguards included to prevent user confusion or mistakes?

## ERROR PREVENTION PATTERNS BY SCORE LEVEL

### Exceptional Error Prevention Patterns (0.9-1.0)

#### The SAFE-GUARD Framework
- **Specify**: Explicit validation criteria and quality requirements
- **Anticipate**: Common failure modes and edge cases identified
- **Fallback**: Recovery procedures and contingency plans provided
- **Execute**: Step-by-step safety protocols and checkpoints
- **Guard**: Protective measures against known risks and vulnerabilities
- **Audit**: Verification and monitoring requirements specified
- **Recover**: Error handling and rollback procedures defined
- **Document**: Clear reporting and logging requirements

### High Error Prevention Patterns (0.7-0.8)

#### The PREVENT Framework
- **Preconditions**: Clear requirements before starting work
- **Requirements**: Specific validation and quality standards
- **Edge Cases**: Boundary conditions and unusual scenarios addressed
- **Validation**: Testing and verification requirements specified
- **Error Handling**: Basic error recovery and reporting guidance
- **Notice**: Warnings about common pitfalls and mistakes
- **Testing**: Quality assurance and validation protocols

## COMPARATIVE EXAMPLES BY SCORE RANGE

### Error Prevention Enhancement Transformations

**Score 0.2 → 0.9 Transformation**:
- Before: "Create a login system for the website"
- After: "**Secure Authentication System Development**

  **Critical Security Requirements**:
  ⚠️ **MANDATORY SECURITY PROTOCOLS**:
  - Password hashing: Use bcrypt with minimum 12 rounds (never store plaintext)
  - Session management: Secure, HttpOnly, SameSite cookies with 30-minute expiration
  - Rate limiting: Maximum 5 login attempts per IP per minute (implement exponential backoff)
  - HTTPS enforcement: Redirect all HTTP traffic, implement HSTS headers

  **Input Validation Requirements**:
  - Email format validation with RFC 5322 compliance
  - Password requirements: Minimum 8 characters, mixed case, numbers, special characters
  - SQL injection prevention: Use parameterized queries exclusively
  - XSS prevention: Sanitize all inputs and escape all outputs

  **Error Prevention Protocols**:
  - ❌ **NEVER** expose system internals in error messages
  - ❌ **NEVER** log passwords or sensitive data (implement sanitized logging)
  - ⚠️ **WARNING**: Account lockout after 5 failed attempts (include unlock mechanism)
  - ⚠️ **WARNING**: Implement CSRF protection for all state-changing operations

  **Testing and Validation**:
  - Penetration testing: SQL injection, XSS, brute force attack simulation
  - Session security: Test session fixation, hijacking, and timeout scenarios
  - Cross-browser testing: Chrome, Firefox, Safari, Edge on desktop and mobile
  - Accessibility testing: Screen reader compatibility and keyboard navigation

  **Monitoring and Recovery**:
  - Failed login attempt logging with IP tracking and geographic analysis
  - Security event alerting for unusual patterns or multiple failures
  - Database backup verification before any authentication schema changes
  - Rollback procedures for authentication system updates or failures

  **Compliance Verification**:
  - OWASP Top 10 vulnerability assessment
  - Privacy compliance audit (GDPR data handling)
  - Password policy compliance with organizational security standards
  - Security code review by independent security specialist"

**Score 0.5 → 0.9 Transformation**:
- Before: "Build a data analytics dashboard with charts and filters. Include user permissions and make it load quickly."
- After: "**Enterprise Analytics Dashboard Development with Comprehensive Error Prevention**

  **Data Integrity Safeguards**:
  ⚠️ **CRITICAL DATA VALIDATION**:
  - Source data verification: Implement checksums and row count validation before processing
  - Real-time data quality monitoring: Alert on missing data, anomalous values, or source failures
  - Cache invalidation protocol: Prevent stale data display with timestamp-based cache management
  - Data lineage tracking: Maintain audit trail from source to visualization for compliance

  **Performance Protection Measures**:
  - Query timeout limits: Maximum 30-second execution time with graceful degradation
  - Resource monitoring: CPU and memory usage limits with automatic query termination
  - Concurrent user limits: Maximum 100 simultaneous users with queue management
  - Data volume limits: Implement pagination for datasets exceeding 10,000 records

  **User Experience Safeguards**:
  - Progressive loading: Display available data while remaining charts load asynchronously
  - Error state handling: User-friendly messages for data unavailability or processing failures
  - Browser compatibility testing: Chrome, Firefox, Safari, Edge with graceful degradation
  - Mobile responsiveness validation: Touch-friendly controls and readable text on all devices

  **Security and Access Control**:
  - Row-level security: Users see only data they're authorized to access
  - Session management: Automatic logout after 60 minutes of inactivity
  - Input sanitization: Prevent XSS attacks in filter inputs and custom queries
  - Audit logging: Track all data access and export activities with user identification

  **Quality Assurance Protocols**:
  - Dashboard load testing: Verify performance under expected user load plus 50% margin
  - Data accuracy verification: Sample-based validation against source systems
  - Filter functionality testing: All combinations of filters with boundary value testing
  - Export functionality validation: Verify data integrity in CSV, PDF, and Excel exports

  **Monitoring and Recovery**:
  - Real-time performance monitoring with automated alerting for response time >5 seconds
  - Data pipeline health checks with automatic failover to backup data sources
  - User error reporting system with detailed error logging for development team
  - Rollback procedures for dashboard updates that impact user experience or data accuracy"

## SCORING CONSISTENCY GUIDELINES

### Error Prevention Score Validation Checklist

**Score 0.9-1.0 Requirements**:
- [ ] Comprehensive identification of likely failure modes and edge cases
- [ ] Specific validation protocols and quality checkpoints defined
- [ ] Clear safety measures and risk mitigation strategies included
- [ ] Fallback procedures and error recovery guidance provided
- [ ] Input validation and output verification requirements specified
- [ ] Monitoring and alerting requirements for ongoing quality assurance

**Score 0.7-0.8 Requirements**:
- [ ] Major risks and failure modes identified and addressed
- [ ] Important validation and testing requirements specified
- [ ] Key safety protocols and warnings included
- [ ] Basic error handling and recovery guidance provided
- [ ] Quality checkpoints for critical functionality defined

**Score 0.5-0.6 Requirements**:
- [ ] Basic error prevention considerations included
- [ ] Some validation and quality requirements mentioned
- [ ] Limited warnings about potential issues provided
- [ ] Basic testing and verification requirements specified
- [ ] Minimal error handling guidance included

## DOMAIN-SPECIFIC ERROR PREVENTION REQUIREMENTS

### Analytics Domain Error Prevention Checklist
- [ ] **Data Quality**: Source validation, accuracy checks, completeness verification
- [ ] **Statistical Validity**: Significance testing, sample size validation, bias prevention
- [ ] **Visualization Accuracy**: Scale consistency, misleading representation prevention
- [ ] **Performance Protection**: Query timeout limits, resource usage monitoring
- [ ] **Access Control**: Data privacy compliance, role-based access verification
- [ ] **Result Validation**: Cross-verification with alternative methods or sources

### Coding Domain Error Prevention Checklist
- [ ] **Security Vulnerabilities**: Input validation, injection attack prevention, access control
- [ ] **Code Quality**: Review processes, testing requirements, performance standards
- [ ] **Data Integrity**: Transaction management, backup procedures, consistency checks
- [ ] **System Reliability**: Error handling, monitoring, recovery procedures
- [ ] **Deployment Safety**: Staging requirements, rollback procedures, version control
- [ ] **Performance Protection**: Resource limits, optimization requirements, load testing

### Content Domain Error Prevention Checklist
- [ ] **Brand Compliance**: Style guide adherence, approval workflow, consistency checks
- [ ] **Accuracy Verification**: Fact-checking requirements, source validation, review process
- [ ] **Legal Compliance**: Copyright, trademark, privacy, and regulatory considerations
- [ ] **Accessibility Standards**: WCAG compliance, inclusive design, readability testing
- [ ] **Quality Assurance**: Editorial review, proofreading, final approval process
- [ ] **Distribution Safety**: Platform-specific requirements, formatting validation, publication checks

### Cross-Domain Error Prevention Checklist
- [ ] **Integration Safety**: API compatibility, data format consistency, version management
- [ ] **Coordination Protocols**: Communication standards, review processes, approval workflows
- [ ] **Quality Standards**: Domain-specific and integrated success criteria validation
- [ ] **Risk Management**: Cross-domain dependencies, failure mode analysis, contingency planning
- [ ] **Testing Requirements**: End-to-end validation, integration testing, user acceptance testing
- [ ] **Change Management**: Version control across domains, rollback procedures, impact analysis

## QUALITY ASSURANCE FOR ERROR PREVENTION SCORING

### Error Prevention Assessment Process
1. **Risk Analysis**: Identify potential failure modes and their likelihood/impact
2. **Prevention Coverage**: Evaluate how well safeguards address identified risks
3. **Validation Requirements**: Assess adequacy of quality checkpoints and validation protocols
4. **Recovery Planning**: Review error handling and recovery procedure completeness
5. **Implementation Guidance**: Determine clarity and specificity of safety instructions

### Evidence Documentation Requirements
For each error prevention score, document:
- **Risk Coverage**: Specific risks identified and prevention measures provided
- **Validation Protocols**: Quality checkpoints and verification requirements specified
- **Safety Measures**: Protective protocols and safeguards included
- **Recovery Procedures**: Error handling and contingency plans provided
- **Implementation Clarity**: Specificity and actionability of error prevention guidance

### Quality Validation Questions
Before finalizing error prevention score:
- Are the most likely and severe risks adequately addressed?
- Do the prevention measures match the risk level and domain requirements?
- Is implementation guidance specific enough to be actionable?
- Are validation and quality checkpoints appropriate and comprehensive?
- Do error handling and recovery procedures provide practical guidance?

---
**Copyright (c) 2025 Matthew J. Utt**
**PromptEvolver 3.0 Training System - Error Prevention Rubric**
**Licensed under MIT License - Compatible with Microsoft PromptWizard Framework**
